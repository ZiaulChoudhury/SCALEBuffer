=== Generated schedule for mkMerge ===

Method schedule
---------------
Method: put
Ready signal: inQ.i_notFull
Conflict-free: get_0, get_1, configure
Conflicts: put
 
Method: get_0
Ready signal: coax_0.RDY_get
Conflict-free: put, get_1
Sequenced before (restricted): configure
Conflicts: get_0
 
Method: get_1
Ready signal: coax_1.RDY_get
Conflict-free: put, get_0
Sequenced before (restricted): configure
Conflicts: get_1
 
Method: configure
Ready signal: True
Conflict-free: put
Sequenced before (restricted): configure
Sequenced after (restricted): get_0, get_1
 
Rule schedule
-------------
Rule: inCLK
Predicate: True
Blocking rules: (none)
 
Rule: mem_portA
Predicate: True
Blocking rules: (none)
 
Rule: mem_portB
Predicate: True
Blocking rules: (none)
 
Rule: mem_portB_read_data
Predicate: True
Blocking rules: (none)
 
Rule: _Q1
Predicate: True
Blocking rules: (none)
 
Rule: _Q2
Predicate: True
Blocking rules: (none)
 
Rule: _Q3
Predicate: True
Blocking rules: (none)
 
Rule: _Q4
Predicate: True
Blocking rules: (none)
 
Rule: _Q5
Predicate: True
Blocking rules: (none)
 
Rule: _Q6
Predicate: True
Blocking rules: (none)
 
Rule: _Q7
Predicate: True
Blocking rules: (none)
 
Rule: _Q1_1
Predicate: True
Blocking rules: (none)
 
Rule: _Q2_1
Predicate: True
Blocking rules: (none)
 
Rule: _Q3_1
Predicate: True
Blocking rules: (none)
 
Rule: _Q4_1
Predicate: True
Blocking rules: (none)
 
Rule: _Q5_1
Predicate: True
Blocking rules: (none)
 
Rule: _Q6_1
Predicate: True
Blocking rules: (none)
 
Rule: _Q7_1
Predicate: True
Blocking rules: (none)
 
Rule: _Q1_2
Predicate: True
Blocking rules: (none)
 
Rule: _Q2_2
Predicate: True
Blocking rules: (none)
 
Rule: _Q3_2
Predicate: True
Blocking rules: (none)
 
Rule: _Q4_2
Predicate: True
Blocking rules: (none)
 
Rule: _Q5_2
Predicate: True
Blocking rules: (none)
 
Rule: _Q6_2
Predicate: True
Blocking rules: (none)
 
Rule: _Q7_2
Predicate: True
Blocking rules: (none)
 
Rule: _Q1_3
Predicate: True
Blocking rules: (none)
 
Rule: _Q2_3
Predicate: True
Blocking rules: (none)
 
Rule: _Q3_3
Predicate: True
Blocking rules: (none)
 
Rule: _Q4_3
Predicate: True
Blocking rules: (none)
 
Rule: _Q5_3
Predicate: True
Blocking rules: (none)
 
Rule: _Q6_3
Predicate: True
Blocking rules: (none)
 
Rule: _Q7_3
Predicate: True
Blocking rules: (none)
 
Rule: _Q1_4
Predicate: True
Blocking rules: (none)
 
Rule: _Q2_4
Predicate: True
Blocking rules: (none)
 
Rule: _Q3_4
Predicate: True
Blocking rules: (none)
 
Rule: _Q4_4
Predicate: True
Blocking rules: (none)
 
Rule: _Q5_4
Predicate: True
Blocking rules: (none)
 
Rule: _Q6_4
Predicate: True
Blocking rules: (none)
 
Rule: _Q7_4
Predicate: True
Blocking rules: (none)
 
Rule: _Q1_5
Predicate: True
Blocking rules: (none)
 
Rule: _Q2_5
Predicate: True
Blocking rules: (none)
 
Rule: _Q3_5
Predicate: True
Blocking rules: (none)
 
Rule: _Q4_5
Predicate: True
Blocking rules: (none)
 
Rule: _Q5_5
Predicate: True
Blocking rules: (none)
 
Rule: _Q6_5
Predicate: True
Blocking rules: (none)
 
Rule: _Q7_5
Predicate: True
Blocking rules: (none)
 
Rule: _Q1_6
Predicate: True
Blocking rules: (none)
 
Rule: _Q2_6
Predicate: True
Blocking rules: (none)
 
Rule: _Q3_6
Predicate: True
Blocking rules: (none)
 
Rule: _Q4_6
Predicate: True
Blocking rules: (none)
 
Rule: _Q5_6
Predicate: True
Blocking rules: (none)
 
Rule: _Q6_6
Predicate: True
Blocking rules: (none)
 
Rule: _Q7_6
Predicate: True
Blocking rules: (none)
 
Rule: _activate1
Predicate: (! ((mem_rRdPtr.read + 18'd100000) == mem_rWrPtr.read)) &&
	   p0_rv.port0__read[1] && (! p1_rv.port1__read[1]) &&
	   (! (cx2 < width))
Blocking rules: (none)
 
Rule: _activate2
Predicate: p1_rv.port0__read[1] && (! p2_rv.port1__read[1])
Blocking rules: (none)
 
Rule: _activate3
Predicate: p2_rv.port0__read[1] && (! p3_rv.port1__read[1])
Blocking rules: (none)
 
Rule: _activate4
Predicate: p3_rv.port0__read[1] && (! p4_rv.port1__read[1])
Blocking rules: (none)
 
Rule: _activate5
Predicate: p4_rv.port0__read[1] && (! p5_rv.port1__read[1])
Blocking rules: (none)
 
Rule: _activate6
Predicate: p5_rv.port0__read[1] && (! p6_rv.port1__read[1])
Blocking rules: (none)
 
Rule: _activate67
Predicate: p6_rv.port0__read[1] && (! p7_rv.port1__read[1])
Blocking rules: (none)
 
Rule: lateralLoad
Predicate: (! (mem_rRdPtr.read == mem_rWrPtr.read)) &&
	   inQ.i_notEmpty && mem_wDataOut.whas && (! p0_rv.port1__read[1]) &&
	   (! (cx2 < width))
Blocking rules: (none)
 
Rule: initialLoad
Predicate: (! ((mem_rRdPtr.read + 18'd100000) == mem_rWrPtr.read)) &&
	   inQ.i_notEmpty &&
	   (cx2 < width)
Blocking rules: (none)
 
Rule: coalesce
Predicate: coax_0.RDY_put && coax_1.RDY_put && p7_rv.port0__read[1]
Blocking rules: (none)
 
Logical execution order: put,
			 get_0,
			 get_1,
			 inCLK,
			 _Q7_2,
			 _Q7_3,
			 _Q6_3,
			 _Q7_4,
			 _Q6_4,
			 _Q5_4,
			 _Q7_5,
			 _Q6_5,
			 _Q5_5,
			 _Q4_5,
			 _Q7_6,
			 _Q6_6,
			 _Q5_6,
			 _Q4_6,
			 _Q3_6,
			 initialLoad,
			 coalesce,
			 _Q7,
			 _Q6,
			 _Q5,
			 _Q4,
			 _Q3,
			 _Q2,
			 _Q1,
			 _Q7_1,
			 _Q6_1,
			 _Q5_1,
			 _Q4_1,
			 _Q3_1,
			 _Q2_1,
			 _Q1_1,
			 _Q6_2,
			 _Q5_2,
			 _Q4_2,
			 _Q3_2,
			 _Q2_2,
			 _Q1_2,
			 _Q5_3,
			 _Q4_3,
			 _Q3_3,
			 _Q2_3,
			 _Q1_3,
			 _Q4_4,
			 _Q3_4,
			 _Q2_4,
			 _Q1_4,
			 _Q3_5,
			 _Q2_5,
			 _Q1_5,
			 _Q2_6,
			 _Q1_6,
			 _activate67,
			 _activate6,
			 _activate5,
			 _activate4,
			 _activate3,
			 _activate2,
			 _activate1,
			 mem_portB_read_data,
			 lateralLoad,
			 configure,
			 mem_portA,
			 mem_portB

=======================================
