/*
 * Generated by Bluespec Compiler, version 2023.01-6-g034050db (build 034050db)
 * 
 * On Fri May 12 17:05:38 IST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkFlowTest.h"
#include "imported_BDPI_functions.h"


/* Literal declarations */
static unsigned int const UWide_literal_512_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u,
																							2863311530u };
static tUWide const UWide_literal_512_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(512u,
																					UWide_literal_512_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr);


/* String declarations */
static std::string const __str_literal_1(" %d", 3u);
static std::string const __str_literal_2("------------------------", 24u);


/* Constructor */
MOD_mkFlowTest::MOD_mkFlowTest(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_count(simHdl, "count", this, 32u, 0u, (tUInt8)0u),
    INST_inL(simHdl, "inL", this, 1u, (tUInt8)1u, (tUInt8)0u),
    INST_init(simHdl, "init", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_px(simHdl, "px", this),
    INST_value(simHdl, "value", this, 8u, (tUInt8)1u, (tUInt8)0u),
    INST_value2(simHdl, "value2", this, 8u, (tUInt8)1u, (tUInt8)0u),
    PORT_RST_N((tUInt8)1u),
    DEF_x__h2471(2863311530u),
    DEF_x__h2516(2863311530u),
    DEF_x__h1500(2863311530u),
    DEF_x__h1545(2863311530u),
    DEF_px_get_1___d28(512u)
{
  symbol_count = 10u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkFlowTest::init_symbols_0()
{
  init_symbol(&symbols[0u], "count", SYM_MODULE, &INST_count);
  init_symbol(&symbols[1u], "init", SYM_MODULE, &INST_init);
  init_symbol(&symbols[2u], "inL", SYM_MODULE, &INST_inL);
  init_symbol(&symbols[3u], "px", SYM_MODULE, &INST_px);
  init_symbol(&symbols[4u], "RL_configure", SYM_RULE);
  init_symbol(&symbols[5u], "RL_intialLoad", SYM_RULE);
  init_symbol(&symbols[6u], "RL_lateralLoad", SYM_RULE);
  init_symbol(&symbols[7u], "RL_receive3", SYM_RULE);
  init_symbol(&symbols[8u], "value", SYM_MODULE, &INST_value);
  init_symbol(&symbols[9u], "value2", SYM_MODULE, &INST_value2);
}


/* Rule actions */

void MOD_mkFlowTest::RL_configure()
{
  INST_px.METH_configure((tUInt8)3u, (tUInt8)3u, 16u);
  if (!(PORT_RST_N == (tUInt8)0u))
    fill_image();
  INST_init.METH_write((tUInt8)1u);
}

void MOD_mkFlowTest::RL_intialLoad()
{
  tUInt8 DEF_value_PLUS_1___d10;
  tUInt8 DEF_NOT_value_EQ_16___d9;
  tUInt64 DEF__0_CONCAT_TASK_initial_load_1_BITS_7_TO_0_2_CON_ETC___d15;
  tUInt8 DEF_value_EQ_16___d8;
  tUInt8 DEF_x_BITS_7_TO_0___h1546;
  tUInt8 DEF_x_BITS_7_TO_0___h1501;
  tUInt8 DEF_b__h582;
  DEF_b__h582 = INST_value.METH_read();
  DEF_value_EQ_16___d8 = DEF_b__h582 == (tUInt8)16u;
  DEF_NOT_value_EQ_16___d9 = !DEF_value_EQ_16___d8;
  DEF_value_PLUS_1___d10 = (tUInt8)255u & (DEF_b__h582 + (tUInt8)1u);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_x__h1545 = initial_load();
  DEF_x_BITS_7_TO_0___h1546 = (tUInt8)((tUInt8)255u & DEF_x__h1545);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_x__h1500 = initial_load();
  DEF_x_BITS_7_TO_0___h1501 = (tUInt8)((tUInt8)255u & DEF_x__h1500);
  DEF__0_CONCAT_TASK_initial_load_1_BITS_7_TO_0_2_CON_ETC___d15 = (((tUInt64)(DEF_x_BITS_7_TO_0___h1501)) << 8u) | (tUInt64)(DEF_x_BITS_7_TO_0___h1546);
  if (DEF_value_EQ_16___d8)
    INST_inL.METH_write((tUInt8)0u);
  if (DEF_NOT_value_EQ_16___d9)
    INST_value.METH_write(DEF_value_PLUS_1___d10);
  INST_px.METH_put(DEF__0_CONCAT_TASK_initial_load_1_BITS_7_TO_0_2_CON_ETC___d15);
}

void MOD_mkFlowTest::RL_lateralLoad()
{
  tUInt64 DEF__0_CONCAT_TASK_lateral_load_9_BITS_7_TO_0_0_CON_ETC___d24;
  tUInt8 DEF_x_BITS_7_TO_0___h2472;
  tUInt8 DEF_x_BITS_7_TO_0___h2517;
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_x__h2516 = lateral_load();
  DEF_x_BITS_7_TO_0___h2517 = (tUInt8)((tUInt8)255u & DEF_x__h2516);
  if (!(PORT_RST_N == (tUInt8)0u))
    DEF_x__h2471 = lateral_load();
  DEF_x_BITS_7_TO_0___h2472 = (tUInt8)((tUInt8)255u & DEF_x__h2471);
  DEF__0_CONCAT_TASK_lateral_load_9_BITS_7_TO_0_0_CON_ETC___d24 = (((((tUInt64)(0u)) << 32u) | (((tUInt64)(DEF_x_BITS_7_TO_0___h2472)) << 24u)) | (((tUInt64)(DEF_x_BITS_7_TO_0___h2517)) << 16u)) | (tUInt64)(0u);
  INST_px.METH_put(DEF__0_CONCAT_TASK_lateral_load_9_BITS_7_TO_0_0_CON_ETC___d24);
}

void MOD_mkFlowTest::RL_receive3()
{
  tUInt32 DEF_count_7_PLUS_1___d48;
  tUInt8 DEF_count_7_EQ_30___d49;
  tUInt32 DEF_b__h6157;
  tUInt8 DEF_unsigned_px_get_1_8_BITS_87_TO_80_1___d32;
  tUInt8 DEF_unsigned_px_get_1_8_BITS_151_TO_144_9___d30;
  tUInt8 DEF_unsigned_px_get_1_8_BITS_23_TO_16_3___d34;
  tUInt8 DEF_unsigned_px_get_1_8_BITS_143_TO_136_5___d36;
  tUInt8 DEF_unsigned_px_get_1_8_BITS_79_TO_72_7___d38;
  tUInt8 DEF_unsigned_px_get_1_8_BITS_15_TO_8_9___d40;
  tUInt8 DEF_unsigned_px_get_1_8_BITS_135_TO_128_1___d42;
  tUInt8 DEF_unsigned_px_get_1_8_BITS_71_TO_64_3___d44;
  tUInt8 DEF_unsigned_px_get_1_8_BITS_7_TO_0_5___d46;
  tUWide DEF_AVMeth_px_get_1(512u, false);
  DEF_b__h6157 = INST_count.METH_read();
  DEF_count_7_EQ_30___d49 = DEF_b__h6157 == 30u;
  DEF_count_7_PLUS_1___d48 = DEF_b__h6157 + 1u;
  INST_px.METH_get_0();
  DEF_AVMeth_px_get_1 = INST_px.METH_get_1();
  DEF_px_get_1___d28 = DEF_AVMeth_px_get_1;
  DEF_unsigned_px_get_1_8_BITS_7_TO_0_5___d46 = DEF_px_get_1___d28.get_bits_in_word8(0u, 0u, 8u);
  DEF_unsigned_px_get_1_8_BITS_71_TO_64_3___d44 = DEF_px_get_1___d28.get_bits_in_word8(2u, 0u, 8u);
  DEF_unsigned_px_get_1_8_BITS_135_TO_128_1___d42 = DEF_px_get_1___d28.get_bits_in_word8(4u, 0u, 8u);
  DEF_unsigned_px_get_1_8_BITS_15_TO_8_9___d40 = DEF_px_get_1___d28.get_bits_in_word8(0u, 8u, 8u);
  DEF_unsigned_px_get_1_8_BITS_79_TO_72_7___d38 = DEF_px_get_1___d28.get_bits_in_word8(2u, 8u, 8u);
  DEF_unsigned_px_get_1_8_BITS_143_TO_136_5___d36 = DEF_px_get_1___d28.get_bits_in_word8(4u, 8u, 8u);
  DEF_unsigned_px_get_1_8_BITS_23_TO_16_3___d34 = DEF_px_get_1___d28.get_bits_in_word8(0u, 16u, 8u);
  DEF_unsigned_px_get_1_8_BITS_87_TO_80_1___d32 = DEF_px_get_1___d28.get_bits_in_word8(2u, 16u, 8u);
  DEF_unsigned_px_get_1_8_BITS_151_TO_144_9___d30 = DEF_px_get_1___d28.get_bits_in_word8(4u, 16u, 8u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_write(sim_hdl,
		 this,
		 "s,8",
		 &__str_literal_1,
		 DEF_unsigned_px_get_1_8_BITS_151_TO_144_9___d30);
    dollar_write(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_1_8_BITS_87_TO_80_1___d32);
    dollar_write(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_1_8_BITS_23_TO_16_3___d34);
    dollar_display(sim_hdl, this);
    dollar_write(sim_hdl,
		 this,
		 "s,8",
		 &__str_literal_1,
		 DEF_unsigned_px_get_1_8_BITS_143_TO_136_5___d36);
    dollar_write(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_1_8_BITS_79_TO_72_7___d38);
    dollar_write(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_1_8_BITS_15_TO_8_9___d40);
    dollar_display(sim_hdl, this);
    dollar_write(sim_hdl,
		 this,
		 "s,8",
		 &__str_literal_1,
		 DEF_unsigned_px_get_1_8_BITS_135_TO_128_1___d42);
    dollar_write(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_1_8_BITS_71_TO_64_3___d44);
    dollar_write(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_1_8_BITS_7_TO_0_5___d46);
    dollar_display(sim_hdl, this);
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
  }
  INST_count.METH_write(DEF_count_7_PLUS_1___d48);
  if (!(PORT_RST_N == (tUInt8)0u))
    if (DEF_count_7_EQ_30___d49)
      dollar_finish(sim_hdl, "32", 0u);
}


/* Methods */


/* Reset routines */

void MOD_mkFlowTest::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_value2.reset_RST(ARG_rst_in);
  INST_value.reset_RST(ARG_rst_in);
  INST_px.reset_RST_N(ARG_rst_in);
  INST_init.reset_RST(ARG_rst_in);
  INST_inL.reset_RST(ARG_rst_in);
  INST_count.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkFlowTest::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkFlowTest::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_count.dump_state(indent + 2u);
  INST_inL.dump_state(indent + 2u);
  INST_init.dump_state(indent + 2u);
  INST_px.dump_state(indent + 2u);
  INST_value.dump_state(indent + 2u);
  INST_value2.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkFlowTest::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 11u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "px_get_1___d28", 512u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1500", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h1545", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2471", 32u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h2516", 32u);
  num = INST_count.dump_VCD_defs(num);
  num = INST_inL.dump_VCD_defs(num);
  num = INST_init.dump_VCD_defs(num);
  num = INST_value.dump_VCD_defs(num);
  num = INST_value2.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_px.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkFlowTest::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFlowTest &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkFlowTest::vcd_defs(tVCDDumpType dt, MOD_mkFlowTest &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 512u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
    vcd_write_x(sim_hdl, num++, 32u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_px_get_1___d28) != DEF_px_get_1___d28)
      {
	vcd_write_val(sim_hdl, num, DEF_px_get_1___d28, 512u);
	backing.DEF_px_get_1___d28 = DEF_px_get_1___d28;
      }
      ++num;
      if ((backing.DEF_x__h1500) != DEF_x__h1500)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1500, 32u);
	backing.DEF_x__h1500 = DEF_x__h1500;
      }
      ++num;
      if ((backing.DEF_x__h1545) != DEF_x__h1545)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h1545, 32u);
	backing.DEF_x__h1545 = DEF_x__h1545;
      }
      ++num;
      if ((backing.DEF_x__h2471) != DEF_x__h2471)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2471, 32u);
	backing.DEF_x__h2471 = DEF_x__h2471;
      }
      ++num;
      if ((backing.DEF_x__h2516) != DEF_x__h2516)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h2516, 32u);
	backing.DEF_x__h2516 = DEF_x__h2516;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_px_get_1___d28, 512u);
      backing.DEF_px_get_1___d28 = DEF_px_get_1___d28;
      vcd_write_val(sim_hdl, num++, DEF_x__h1500, 32u);
      backing.DEF_x__h1500 = DEF_x__h1500;
      vcd_write_val(sim_hdl, num++, DEF_x__h1545, 32u);
      backing.DEF_x__h1545 = DEF_x__h1545;
      vcd_write_val(sim_hdl, num++, DEF_x__h2471, 32u);
      backing.DEF_x__h2471 = DEF_x__h2471;
      vcd_write_val(sim_hdl, num++, DEF_x__h2516, 32u);
      backing.DEF_x__h2516 = DEF_x__h2516;
    }
}

void MOD_mkFlowTest::vcd_prims(tVCDDumpType dt, MOD_mkFlowTest &backing)
{
  INST_count.dump_VCD(dt, backing.INST_count);
  INST_inL.dump_VCD(dt, backing.INST_inL);
  INST_init.dump_VCD(dt, backing.INST_init);
  INST_value.dump_VCD(dt, backing.INST_value);
  INST_value2.dump_VCD(dt, backing.INST_value2);
}

void MOD_mkFlowTest::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkFlowTest &backing)
{
  INST_px.dump_VCD(dt, levels, backing.INST_px);
}
