//
// Generated by Bluespec Compiler, version untagged-gad02e931 (build ad02e931)
//
// On Tue Jan 11 12:13:59 GMT 2022
//
//
// Ports:
// Name                         I/O  size props
// get                            O    32
// RDY_get                        O     1 reg
// RDY_put                        O     1 const
// RDY_configure                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_datas                      I     8 reg
// configure_a                    I     4 unused
// configure_m                    I     8 reg
// configure_wx                   I    12 reg
// configure_wxx                  I    19 reg
// EN_put                         I     1
// EN_configure                   I     1
// EN_get                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFlowTest(CLK,
		  RST_N,

		  EN_get,
		  get,
		  RDY_get,

		  put_datas,
		  EN_put,
		  RDY_put,

		  configure_a,
		  configure_m,
		  configure_wx,
		  configure_wxx,
		  EN_configure,
		  RDY_configure);
  input  CLK;
  input  RST_N;

  // actionvalue method get
  input  EN_get;
  output [31 : 0] get;
  output RDY_get;

  // action method put
  input  [7 : 0] put_datas;
  input  EN_put;
  output RDY_put;

  // action method configure
  input  [3 : 0] configure_a;
  input  [7 : 0] configure_m;
  input  [11 : 0] configure_wx;
  input  [18 : 0] configure_wxx;
  input  EN_configure;
  output RDY_configure;

  // signals for module outputs
  wire [31 : 0] get;
  wire RDY_configure, RDY_get, RDY_put;

  // register count
  reg [31 : 0] count;
  wire [31 : 0] count$D_IN;
  wire count$EN;

  // register fetch
  reg fetch;
  wire fetch$D_IN, fetch$EN;

  // register index
  reg [18 : 0] index;
  wire [18 : 0] index$D_IN;
  wire index$EN;

  // register init
  reg init;
  wire init$D_IN, init$EN;

  // register out
  reg [1151 : 0] out;
  wire [1151 : 0] out$D_IN;
  wire out$EN;

  // register seed
  reg [7 : 0] seed;
  wire [7 : 0] seed$D_IN;
  wire seed$EN;

  // register value
  reg [7 : 0] value;
  wire [7 : 0] value$D_IN;
  wire value$EN;

  // ports of submodule cx_0
  wire [71 : 0] cx_0$put_datas;
  wire [7 : 0] cx_0$put_sumPrev, cx_0$result;
  wire cx_0$EN_put, cx_0$EN_result, cx_0$RDY_result;

  // ports of submodule cx_1
  wire [71 : 0] cx_1$put_datas;
  wire [7 : 0] cx_1$put_sumPrev, cx_1$result;
  wire cx_1$EN_put, cx_1$EN_result, cx_1$RDY_result;

  // ports of submodule cx_10
  wire [71 : 0] cx_10$put_datas;
  wire [7 : 0] cx_10$put_sumPrev, cx_10$result;
  wire cx_10$EN_put, cx_10$EN_result, cx_10$RDY_result;

  // ports of submodule cx_11
  wire [71 : 0] cx_11$put_datas;
  wire [7 : 0] cx_11$put_sumPrev, cx_11$result;
  wire cx_11$EN_put, cx_11$EN_result, cx_11$RDY_result;

  // ports of submodule cx_12
  wire [71 : 0] cx_12$put_datas;
  wire [7 : 0] cx_12$put_sumPrev, cx_12$result;
  wire cx_12$EN_put, cx_12$EN_result, cx_12$RDY_result;

  // ports of submodule cx_13
  wire [71 : 0] cx_13$put_datas;
  wire [7 : 0] cx_13$put_sumPrev, cx_13$result;
  wire cx_13$EN_put, cx_13$EN_result, cx_13$RDY_result;

  // ports of submodule cx_14
  wire [71 : 0] cx_14$put_datas;
  wire [7 : 0] cx_14$put_sumPrev, cx_14$result;
  wire cx_14$EN_put, cx_14$EN_result, cx_14$RDY_result;

  // ports of submodule cx_15
  wire [71 : 0] cx_15$put_datas;
  wire [7 : 0] cx_15$put_sumPrev, cx_15$result;
  wire cx_15$EN_put, cx_15$EN_result, cx_15$RDY_result;

  // ports of submodule cx_2
  wire [71 : 0] cx_2$put_datas;
  wire [7 : 0] cx_2$put_sumPrev, cx_2$result;
  wire cx_2$EN_put, cx_2$EN_result, cx_2$RDY_result;

  // ports of submodule cx_3
  wire [71 : 0] cx_3$put_datas;
  wire [7 : 0] cx_3$put_sumPrev, cx_3$result;
  wire cx_3$EN_put, cx_3$EN_result, cx_3$RDY_result;

  // ports of submodule cx_4
  wire [71 : 0] cx_4$put_datas;
  wire [7 : 0] cx_4$put_sumPrev, cx_4$result;
  wire cx_4$EN_put, cx_4$EN_result, cx_4$RDY_result;

  // ports of submodule cx_5
  wire [71 : 0] cx_5$put_datas;
  wire [7 : 0] cx_5$put_sumPrev, cx_5$result;
  wire cx_5$EN_put, cx_5$EN_result, cx_5$RDY_result;

  // ports of submodule cx_6
  wire [71 : 0] cx_6$put_datas;
  wire [7 : 0] cx_6$put_sumPrev, cx_6$result;
  wire cx_6$EN_put, cx_6$EN_result, cx_6$RDY_result;

  // ports of submodule cx_7
  wire [71 : 0] cx_7$put_datas;
  wire [7 : 0] cx_7$put_sumPrev, cx_7$result;
  wire cx_7$EN_put, cx_7$EN_result, cx_7$RDY_result;

  // ports of submodule cx_8
  wire [71 : 0] cx_8$put_datas;
  wire [7 : 0] cx_8$put_sumPrev, cx_8$result;
  wire cx_8$EN_put, cx_8$EN_result, cx_8$RDY_result;

  // ports of submodule cx_9
  wire [71 : 0] cx_9$put_datas;
  wire [7 : 0] cx_9$put_sumPrev, cx_9$result;
  wire cx_9$EN_put, cx_9$EN_result, cx_9$RDY_result;

  // ports of submodule outQ
  wire [7 : 0] outQ$D_IN, outQ$D_OUT;
  wire outQ$CLR, outQ$DEQ, outQ$EMPTY_N, outQ$ENQ, outQ$FULL_N;

  // ports of submodule px
  wire [1151 : 0] px$get;
  wire [143 : 0] px$put_datas;
  wire [11 : 0] px$configure_wx;
  wire [7 : 0] px$configure_m;
  wire [3 : 0] px$configure_a;
  wire px$EN_configure, px$EN_get, px$EN_put, px$RDY_get, px$RDY_put;

  // rule scheduling signals
  wire WILL_FIRE_RL__getFinal;

  // inputs to muxes for submodule ports
  wire MUX_fetch$write_1__SEL_2;

  // remaining internal signals
  wire [127 : 0] _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d62;
  wire [111 : 0] _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d55;
  wire [79 : 0] _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d41;
  wire [63 : 0] _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d34;
  wire [31 : 0] _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d20;
  wire [15 : 0] _10_MUL_value___d31,
		_11_MUL_value___d28,
		_12_MUL_value___d24,
		_13_MUL_value___d21,
		_14_MUL_value___d17,
		_15_MUL_value___d14,
		_17_MUL_value___d6,
		_3_MUL_value___d56,
		_5_MUL_value___d49,
		_6_MUL_value___d45,
		_7_MUL_value___d42,
		_9_MUL_value___d35;

  // actionvalue method get
  assign get = { 24'd0, outQ$D_OUT } ;
  assign RDY_get = outQ$EMPTY_N ;

  // action method put
  assign RDY_put = 1'd1 ;

  // action method configure
  assign RDY_configure = 1'd1 ;

  // submodule cx_0
  mkConv cx_0(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_0$put_datas),
	      .put_sumPrev(cx_0$put_sumPrev),
	      .EN_put(cx_0$EN_put),
	      .EN_result(cx_0$EN_result),
	      .RDY_put(),
	      .result(cx_0$result),
	      .RDY_result(cx_0$RDY_result));

  // submodule cx_1
  mkConv cx_1(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_1$put_datas),
	      .put_sumPrev(cx_1$put_sumPrev),
	      .EN_put(cx_1$EN_put),
	      .EN_result(cx_1$EN_result),
	      .RDY_put(),
	      .result(cx_1$result),
	      .RDY_result(cx_1$RDY_result));

  // submodule cx_10
  mkConv cx_10(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_10$put_datas),
	       .put_sumPrev(cx_10$put_sumPrev),
	       .EN_put(cx_10$EN_put),
	       .EN_result(cx_10$EN_result),
	       .RDY_put(),
	       .result(cx_10$result),
	       .RDY_result(cx_10$RDY_result));

  // submodule cx_11
  mkConv cx_11(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_11$put_datas),
	       .put_sumPrev(cx_11$put_sumPrev),
	       .EN_put(cx_11$EN_put),
	       .EN_result(cx_11$EN_result),
	       .RDY_put(),
	       .result(cx_11$result),
	       .RDY_result(cx_11$RDY_result));

  // submodule cx_12
  mkConv cx_12(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_12$put_datas),
	       .put_sumPrev(cx_12$put_sumPrev),
	       .EN_put(cx_12$EN_put),
	       .EN_result(cx_12$EN_result),
	       .RDY_put(),
	       .result(cx_12$result),
	       .RDY_result(cx_12$RDY_result));

  // submodule cx_13
  mkConv cx_13(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_13$put_datas),
	       .put_sumPrev(cx_13$put_sumPrev),
	       .EN_put(cx_13$EN_put),
	       .EN_result(cx_13$EN_result),
	       .RDY_put(),
	       .result(cx_13$result),
	       .RDY_result(cx_13$RDY_result));

  // submodule cx_14
  mkConv cx_14(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_14$put_datas),
	       .put_sumPrev(cx_14$put_sumPrev),
	       .EN_put(cx_14$EN_put),
	       .EN_result(cx_14$EN_result),
	       .RDY_put(),
	       .result(cx_14$result),
	       .RDY_result(cx_14$RDY_result));

  // submodule cx_15
  mkConv cx_15(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_15$put_datas),
	       .put_sumPrev(cx_15$put_sumPrev),
	       .EN_put(cx_15$EN_put),
	       .EN_result(cx_15$EN_result),
	       .RDY_put(),
	       .result(cx_15$result),
	       .RDY_result(cx_15$RDY_result));

  // submodule cx_2
  mkConv cx_2(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_2$put_datas),
	      .put_sumPrev(cx_2$put_sumPrev),
	      .EN_put(cx_2$EN_put),
	      .EN_result(cx_2$EN_result),
	      .RDY_put(),
	      .result(cx_2$result),
	      .RDY_result(cx_2$RDY_result));

  // submodule cx_3
  mkConv cx_3(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_3$put_datas),
	      .put_sumPrev(cx_3$put_sumPrev),
	      .EN_put(cx_3$EN_put),
	      .EN_result(cx_3$EN_result),
	      .RDY_put(),
	      .result(cx_3$result),
	      .RDY_result(cx_3$RDY_result));

  // submodule cx_4
  mkConv cx_4(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_4$put_datas),
	      .put_sumPrev(cx_4$put_sumPrev),
	      .EN_put(cx_4$EN_put),
	      .EN_result(cx_4$EN_result),
	      .RDY_put(),
	      .result(cx_4$result),
	      .RDY_result(cx_4$RDY_result));

  // submodule cx_5
  mkConv cx_5(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_5$put_datas),
	      .put_sumPrev(cx_5$put_sumPrev),
	      .EN_put(cx_5$EN_put),
	      .EN_result(cx_5$EN_result),
	      .RDY_put(),
	      .result(cx_5$result),
	      .RDY_result(cx_5$RDY_result));

  // submodule cx_6
  mkConv cx_6(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_6$put_datas),
	      .put_sumPrev(cx_6$put_sumPrev),
	      .EN_put(cx_6$EN_put),
	      .EN_result(cx_6$EN_result),
	      .RDY_put(),
	      .result(cx_6$result),
	      .RDY_result(cx_6$RDY_result));

  // submodule cx_7
  mkConv cx_7(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_7$put_datas),
	      .put_sumPrev(cx_7$put_sumPrev),
	      .EN_put(cx_7$EN_put),
	      .EN_result(cx_7$EN_result),
	      .RDY_put(),
	      .result(cx_7$result),
	      .RDY_result(cx_7$RDY_result));

  // submodule cx_8
  mkConv cx_8(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_8$put_datas),
	      .put_sumPrev(cx_8$put_sumPrev),
	      .EN_put(cx_8$EN_put),
	      .EN_result(cx_8$EN_result),
	      .RDY_put(),
	      .result(cx_8$result),
	      .RDY_result(cx_8$RDY_result));

  // submodule cx_9
  mkConv cx_9(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_9$put_datas),
	      .put_sumPrev(cx_9$put_sumPrev),
	      .EN_put(cx_9$EN_put),
	      .EN_result(cx_9$EN_result),
	      .RDY_put(),
	      .result(cx_9$result),
	      .RDY_result(cx_9$RDY_result));

  // submodule outQ
  FIFO2 #(.width(32'd8), .guarded(1'd1)) outQ(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(outQ$D_IN),
					      .ENQ(outQ$ENQ),
					      .DEQ(outQ$DEQ),
					      .CLR(outQ$CLR),
					      .D_OUT(outQ$D_OUT),
					      .FULL_N(outQ$FULL_N),
					      .EMPTY_N(outQ$EMPTY_N));

  // submodule px
  mkMerge px(.CLK(CLK),
	     .RST_N(RST_N),
	     .configure_a(px$configure_a),
	     .configure_m(px$configure_m),
	     .configure_wx(px$configure_wx),
	     .put_datas(px$put_datas),
	     .EN_put(px$EN_put),
	     .EN_get(px$EN_get),
	     .EN_configure(px$EN_configure),
	     .RDY_put(px$RDY_put),
	     .get(px$get),
	     .RDY_get(px$RDY_get),
	     .RDY_configure());

  // rule RL__getFinal
  assign WILL_FIRE_RL__getFinal = cx_15$RDY_result && outQ$FULL_N ;

  // inputs to muxes for submodule ports
  assign MUX_fetch$write_1__SEL_2 = px$RDY_get && fetch ;

  // register count
  assign count$D_IN = 32'h0 ;
  assign count$EN = 1'b0 ;

  // register fetch
  assign fetch$D_IN = WILL_FIRE_RL__getFinal ;
  assign fetch$EN = px$RDY_get && fetch || WILL_FIRE_RL__getFinal ;

  // register index
  assign index$D_IN = configure_wxx ;
  assign index$EN = EN_configure ;

  // register init
  assign init$D_IN = 1'd1 ;
  assign init$EN = EN_configure ;

  // register out
  assign out$D_IN = px$get ;
  assign out$EN = MUX_fetch$write_1__SEL_2 ;

  // register seed
  assign seed$D_IN = put_datas ;
  assign seed$EN = EN_put ;

  // register value
  assign value$D_IN = value + 8'd1 ;
  assign value$EN = px$RDY_put && init ;

  // submodule cx_0
  assign cx_0$put_datas = out[71:0] ;
  assign cx_0$put_sumPrev = 8'd0 ;
  assign cx_0$EN_put = 1'd1 ;
  assign cx_0$EN_result = cx_0$RDY_result ;

  // submodule cx_1
  assign cx_1$put_datas = out[143:72] ;
  assign cx_1$put_sumPrev = cx_0$result ;
  assign cx_1$EN_put = cx_0$RDY_result ;
  assign cx_1$EN_result = cx_1$RDY_result ;

  // submodule cx_10
  assign cx_10$put_datas = out[791:720] ;
  assign cx_10$put_sumPrev = cx_9$result ;
  assign cx_10$EN_put = cx_9$RDY_result ;
  assign cx_10$EN_result = cx_10$RDY_result ;

  // submodule cx_11
  assign cx_11$put_datas = out[863:792] ;
  assign cx_11$put_sumPrev = cx_10$result ;
  assign cx_11$EN_put = cx_10$RDY_result ;
  assign cx_11$EN_result = cx_11$RDY_result ;

  // submodule cx_12
  assign cx_12$put_datas = out[935:864] ;
  assign cx_12$put_sumPrev = cx_11$result ;
  assign cx_12$EN_put = cx_11$RDY_result ;
  assign cx_12$EN_result = cx_12$RDY_result ;

  // submodule cx_13
  assign cx_13$put_datas = out[1007:936] ;
  assign cx_13$put_sumPrev = cx_12$result ;
  assign cx_13$EN_put = cx_12$RDY_result ;
  assign cx_13$EN_result = cx_13$RDY_result ;

  // submodule cx_14
  assign cx_14$put_datas = out[1079:1008] ;
  assign cx_14$put_sumPrev = cx_13$result ;
  assign cx_14$EN_put = cx_13$RDY_result ;
  assign cx_14$EN_result = cx_14$RDY_result ;

  // submodule cx_15
  assign cx_15$put_datas = out[1151:1080] ;
  assign cx_15$put_sumPrev = cx_14$result ;
  assign cx_15$EN_put = cx_14$RDY_result ;
  assign cx_15$EN_result = WILL_FIRE_RL__getFinal ;

  // submodule cx_2
  assign cx_2$put_datas = out[215:144] ;
  assign cx_2$put_sumPrev = cx_1$result ;
  assign cx_2$EN_put = cx_1$RDY_result ;
  assign cx_2$EN_result = cx_2$RDY_result ;

  // submodule cx_3
  assign cx_3$put_datas = out[287:216] ;
  assign cx_3$put_sumPrev = cx_2$result ;
  assign cx_3$EN_put = cx_2$RDY_result ;
  assign cx_3$EN_result = cx_3$RDY_result ;

  // submodule cx_4
  assign cx_4$put_datas = out[359:288] ;
  assign cx_4$put_sumPrev = cx_3$result ;
  assign cx_4$EN_put = cx_3$RDY_result ;
  assign cx_4$EN_result = cx_4$RDY_result ;

  // submodule cx_5
  assign cx_5$put_datas = out[431:360] ;
  assign cx_5$put_sumPrev = cx_4$result ;
  assign cx_5$EN_put = cx_4$RDY_result ;
  assign cx_5$EN_result = cx_5$RDY_result ;

  // submodule cx_6
  assign cx_6$put_datas = out[503:432] ;
  assign cx_6$put_sumPrev = cx_5$result ;
  assign cx_6$EN_put = cx_5$RDY_result ;
  assign cx_6$EN_result = cx_6$RDY_result ;

  // submodule cx_7
  assign cx_7$put_datas = out[575:504] ;
  assign cx_7$put_sumPrev = cx_6$result ;
  assign cx_7$EN_put = cx_6$RDY_result ;
  assign cx_7$EN_result = cx_7$RDY_result ;

  // submodule cx_8
  assign cx_8$put_datas = out[647:576] ;
  assign cx_8$put_sumPrev = cx_7$result ;
  assign cx_8$EN_put = cx_7$RDY_result ;
  assign cx_8$EN_result = cx_8$RDY_result ;

  // submodule cx_9
  assign cx_9$put_datas = out[719:648] ;
  assign cx_9$put_sumPrev = cx_8$result ;
  assign cx_9$EN_put = cx_8$RDY_result ;
  assign cx_9$EN_result = cx_9$RDY_result ;

  // submodule outQ
  assign outQ$D_IN = cx_15$result ;
  assign outQ$ENQ = WILL_FIRE_RL__getFinal ;
  assign outQ$DEQ = EN_get ;
  assign outQ$CLR = 1'b0 ;

  // submodule px
  assign px$configure_a = configure_a ;
  assign px$configure_m = configure_m ;
  assign px$configure_wx = configure_wx ;
  assign px$put_datas =
	     { _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d62,
	       value + seed,
	       seed } ;
  assign px$EN_put = px$RDY_put && init ;
  assign px$EN_get = MUX_fetch$write_1__SEL_2 ;
  assign px$EN_configure = EN_configure ;

  // remaining internal signals
  assign _10_MUL_value___d31 = 8'd10 * value ;
  assign _11_MUL_value___d28 = 8'd11 * value ;
  assign _12_MUL_value___d24 = 8'd12 * value ;
  assign _13_MUL_value___d21 = 8'd13 * value ;
  assign _14_MUL_value___d17 = 8'd14 * value ;
  assign _15_MUL_value___d14 = 8'd15 * value ;
  assign _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d20 =
	     { _17_MUL_value___d6[7:0] + seed,
	       { value[3:0], 4'd0 } + seed,
	       _15_MUL_value___d14[7:0] + seed,
	       _14_MUL_value___d17[7:0] + seed } ;
  assign _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d34 =
	     { _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d20,
	       _13_MUL_value___d21[7:0] + seed,
	       _12_MUL_value___d24[7:0] + seed,
	       _11_MUL_value___d28[7:0] + seed,
	       _10_MUL_value___d31[7:0] + seed } ;
  assign _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d41 =
	     { _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d34,
	       _9_MUL_value___d35[7:0] + seed,
	       { value[4:0], 3'd0 } + seed } ;
  assign _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d55 =
	     { _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d41,
	       _7_MUL_value___d42[7:0] + seed,
	       _6_MUL_value___d45[7:0] + seed,
	       _5_MUL_value___d49[7:0] + seed,
	       { value[5:0], 2'd0 } + seed } ;
  assign _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d62 =
	     { _17_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_valu_ETC___d55,
	       _3_MUL_value___d56[7:0] + seed,
	       { value[6:0], 1'd0 } + seed } ;
  assign _17_MUL_value___d6 = 8'd17 * value ;
  assign _3_MUL_value___d56 = 8'd3 * value ;
  assign _5_MUL_value___d49 = 8'd5 * value ;
  assign _6_MUL_value___d45 = 8'd6 * value ;
  assign _7_MUL_value___d42 = 8'd7 * value ;
  assign _9_MUL_value___d35 = 8'd9 * value ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fetch <= `BSV_ASSIGNMENT_DELAY 1'd1;
	index <= `BSV_ASSIGNMENT_DELAY 19'd0;
	init <= `BSV_ASSIGNMENT_DELAY 1'd0;
	seed <= `BSV_ASSIGNMENT_DELAY 8'd1;
	value <= `BSV_ASSIGNMENT_DELAY 8'd1;
      end
    else
      begin
        if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (fetch$EN) fetch <= `BSV_ASSIGNMENT_DELAY fetch$D_IN;
	if (index$EN) index <= `BSV_ASSIGNMENT_DELAY index$D_IN;
	if (init$EN) init <= `BSV_ASSIGNMENT_DELAY init$D_IN;
	if (seed$EN) seed <= `BSV_ASSIGNMENT_DELAY seed$D_IN;
	if (value$EN) value <= `BSV_ASSIGNMENT_DELAY value$D_IN;
      end
    if (out$EN) out <= `BSV_ASSIGNMENT_DELAY out$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    count = 32'hAAAAAAAA;
    fetch = 1'h0;
    index = 19'h2AAAA;
    init = 1'h0;
    out =
	1152'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    seed = 8'hAA;
    value = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFlowTest

