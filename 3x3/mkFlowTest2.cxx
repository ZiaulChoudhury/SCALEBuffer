/*
 * Generated by Bluespec Compiler, version 2023.01 (build 52adafa5)
 * 
 * On Mon May  8 19:05:47 IST 2023
 * 
 */
#include "bluesim_primitives.h"
#include "mkFlowTest2.h"


/* Literal declarations */
static unsigned int const UWide_literal_128_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr[] = { 2863311530u,
											2863311530u,
											2863311530u,
											2863311530u };
static tUWide const UWide_literal_128_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa(128u,
									UWide_literal_128_haaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa_arr);
static unsigned int const UWide_literal_128_h100f0e0d0c0b0a090807060504030201_arr[] = { 67305985u,
											134678021u,
											202050057u,
											269422093u };
static tUWide const UWide_literal_128_h100f0e0d0c0b0a090807060504030201(128u,
									UWide_literal_128_h100f0e0d0c0b0a090807060504030201_arr);


/* String declarations */
static std::string const __str_literal_1("%d", 2u);


/* Constructor */
MOD_mkFlowTest2::MOD_mkFlowTest2(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_count(simHdl, "count", this, 32u, 0u, (tUInt8)0u),
    INST_px(simHdl, "px", this),
    PORT_RST_N((tUInt8)1u),
    DEF_px_get___d3(128u)
{
  symbol_count = 4u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkFlowTest2::init_symbols_0()
{
  init_symbol(&symbols[0u], "count", SYM_MODULE, &INST_count);
  init_symbol(&symbols[1u], "px", SYM_MODULE, &INST_px);
  init_symbol(&symbols[2u], "RL_put", SYM_RULE);
  init_symbol(&symbols[3u], "RL_receive", SYM_RULE);
}


/* Rule actions */

void MOD_mkFlowTest2::RL_put()
{
  INST_px.METH_put(UWide_literal_128_h100f0e0d0c0b0a090807060504030201);
}

void MOD_mkFlowTest2::RL_receive()
{
  tUInt8 DEF_unsigned_px_get_BITS_15_TO_8___d7;
  tUInt8 DEF_unsigned_px_get_BITS_7_TO_0___d5;
  tUInt8 DEF_unsigned_px_get_BITS_23_TO_16___d9;
  tUInt8 DEF_unsigned_px_get_BITS_31_TO_24_0___d11;
  tUInt8 DEF_unsigned_px_get_BITS_39_TO_32_2___d13;
  tUInt8 DEF_unsigned_px_get_BITS_47_TO_40_4___d15;
  tUInt8 DEF_unsigned_px_get_BITS_55_TO_48_6___d17;
  tUInt8 DEF_unsigned_px_get_BITS_63_TO_56_8___d19;
  tUInt8 DEF_unsigned_px_get_BITS_71_TO_64_0___d21;
  tUInt8 DEF_unsigned_px_get_BITS_79_TO_72_2___d23;
  tUInt8 DEF_unsigned_px_get_BITS_87_TO_80_4___d25;
  tUInt8 DEF_unsigned_px_get_BITS_95_TO_88_6___d27;
  tUInt8 DEF_unsigned_px_get_BITS_103_TO_96_8___d29;
  tUInt8 DEF_unsigned_px_get_BITS_111_TO_104_0___d31;
  tUInt8 DEF_unsigned_px_get_BITS_119_TO_112_2___d33;
  tUInt8 DEF_unsigned_px_get_BITS_127_TO_120_4___d35;
  tUWide DEF_AVMeth_px_get(128u, false);
  DEF_AVMeth_px_get = INST_px.METH_get();
  DEF_px_get___d3 = DEF_AVMeth_px_get;
  DEF_unsigned_px_get_BITS_127_TO_120_4___d35 = DEF_px_get___d3.get_bits_in_word8(3u, 24u, 8u);
  DEF_unsigned_px_get_BITS_119_TO_112_2___d33 = DEF_px_get___d3.get_bits_in_word8(3u, 16u, 8u);
  DEF_unsigned_px_get_BITS_111_TO_104_0___d31 = DEF_px_get___d3.get_bits_in_word8(3u, 8u, 8u);
  DEF_unsigned_px_get_BITS_103_TO_96_8___d29 = DEF_px_get___d3.get_bits_in_word8(3u, 0u, 8u);
  DEF_unsigned_px_get_BITS_95_TO_88_6___d27 = DEF_px_get___d3.get_bits_in_word8(2u, 24u, 8u);
  DEF_unsigned_px_get_BITS_87_TO_80_4___d25 = DEF_px_get___d3.get_bits_in_word8(2u, 16u, 8u);
  DEF_unsigned_px_get_BITS_79_TO_72_2___d23 = DEF_px_get___d3.get_bits_in_word8(2u, 8u, 8u);
  DEF_unsigned_px_get_BITS_71_TO_64_0___d21 = DEF_px_get___d3.get_bits_in_word8(2u, 0u, 8u);
  DEF_unsigned_px_get_BITS_63_TO_56_8___d19 = DEF_px_get___d3.get_bits_in_word8(1u, 24u, 8u);
  DEF_unsigned_px_get_BITS_55_TO_48_6___d17 = DEF_px_get___d3.get_bits_in_word8(1u, 16u, 8u);
  DEF_unsigned_px_get_BITS_39_TO_32_2___d13 = DEF_px_get___d3.get_bits_in_word8(1u, 0u, 8u);
  DEF_unsigned_px_get_BITS_47_TO_40_4___d15 = DEF_px_get___d3.get_bits_in_word8(1u, 8u, 8u);
  DEF_unsigned_px_get_BITS_31_TO_24_0___d11 = DEF_px_get___d3.get_bits_in_word8(0u, 24u, 8u);
  DEF_unsigned_px_get_BITS_23_TO_16___d9 = DEF_px_get___d3.get_bits_in_word8(0u, 16u, 8u);
  DEF_unsigned_px_get_BITS_7_TO_0___d5 = DEF_px_get___d3.get_bits_in_word8(0u, 0u, 8u);
  DEF_unsigned_px_get_BITS_15_TO_8___d7 = DEF_px_get___d3.get_bits_in_word8(0u, 8u, 8u);
  if (!(PORT_RST_N == (tUInt8)0u))
  {
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_7_TO_0___d5);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_15_TO_8___d7);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_23_TO_16___d9);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_31_TO_24_0___d11);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_39_TO_32_2___d13);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_47_TO_40_4___d15);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_55_TO_48_6___d17);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_63_TO_56_8___d19);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_71_TO_64_0___d21);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_79_TO_72_2___d23);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_87_TO_80_4___d25);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_95_TO_88_6___d27);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_103_TO_96_8___d29);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_111_TO_104_0___d31);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_119_TO_112_2___d33);
    dollar_display(sim_hdl, this, "s,8", &__str_literal_1, DEF_unsigned_px_get_BITS_127_TO_120_4___d35);
    dollar_finish(sim_hdl, "32", 0u);
  }
}


/* Methods */


/* Reset routines */

void MOD_mkFlowTest2::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_px.reset_RST_N(ARG_rst_in);
  INST_count.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkFlowTest2::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkFlowTest2::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_count.dump_state(indent + 2u);
  INST_px.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkFlowTest2::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 3u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "px_get___d3", 128u);
  num = INST_count.dump_VCD_defs(num);
  if (levels != 1u)
  {
    unsigned int l = levels == 0u ? 0u : levels - 1u;
    num = INST_px.dump_VCD_defs(l);
  }
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkFlowTest2::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkFlowTest2 &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
  if (levels != 1u)
    vcd_submodules(dt, levels - 1u, backing);
}

void MOD_mkFlowTest2::vcd_defs(tVCDDumpType dt, MOD_mkFlowTest2 &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 128u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_px_get___d3) != DEF_px_get___d3)
      {
	vcd_write_val(sim_hdl, num, DEF_px_get___d3, 128u);
	backing.DEF_px_get___d3 = DEF_px_get___d3;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_px_get___d3, 128u);
      backing.DEF_px_get___d3 = DEF_px_get___d3;
    }
}

void MOD_mkFlowTest2::vcd_prims(tVCDDumpType dt, MOD_mkFlowTest2 &backing)
{
  INST_count.dump_VCD(dt, backing.INST_count);
}

void MOD_mkFlowTest2::vcd_submodules(tVCDDumpType dt, unsigned int levels, MOD_mkFlowTest2 &backing)
{
  INST_px.dump_VCD(dt, levels, backing.INST_px);
}
