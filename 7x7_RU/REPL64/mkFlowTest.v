//
// Generated by Bluespec Compiler, version untagged-gad02e931 (build ad02e931)
//
// On Fri Jan 21 12:35:08 GMT 2022
//
//
// Ports:
// Name                         I/O  size props
// get                            O    32
// RDY_get                        O     1 reg
// RDY_put                        O     1 const
// RDY_configure                  O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_datas                      I     8 reg
// configure_a                    I     4 reg
// configure_m                    I     8 reg
// configure_wx                   I    12 reg
// configure_wxx                  I    19 reg
// EN_put                         I     1
// EN_configure                   I     1
// EN_get                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkFlowTest(CLK,
		  RST_N,

		  EN_get,
		  get,
		  RDY_get,

		  put_datas,
		  EN_put,
		  RDY_put,

		  configure_a,
		  configure_m,
		  configure_wx,
		  configure_wxx,
		  EN_configure,
		  RDY_configure);
  input  CLK;
  input  RST_N;

  // actionvalue method get
  input  EN_get;
  output [31 : 0] get;
  output RDY_get;

  // action method put
  input  [7 : 0] put_datas;
  input  EN_put;
  output RDY_put;

  // action method configure
  input  [3 : 0] configure_a;
  input  [7 : 0] configure_m;
  input  [11 : 0] configure_wx;
  input  [18 : 0] configure_wxx;
  input  EN_configure;
  output RDY_configure;

  // signals for module outputs
  wire [31 : 0] get;
  wire RDY_configure, RDY_get, RDY_put;

  // register count
  reg [31 : 0] count;
  wire [31 : 0] count$D_IN;
  wire count$EN;

  // register fetch
  reg fetch;
  wire fetch$D_IN, fetch$EN;

  // register index
  reg [18 : 0] index;
  wire [18 : 0] index$D_IN;
  wire index$EN;

  // register init
  reg init;
  wire init$D_IN, init$EN;

  // register out
  reg [25087 : 0] out;
  wire [25087 : 0] out$D_IN;
  wire out$EN;

  // register seed
  reg [7 : 0] seed;
  wire [7 : 0] seed$D_IN;
  wire seed$EN;

  // register value
  reg [7 : 0] value;
  wire [7 : 0] value$D_IN;
  wire value$EN;

  // ports of submodule cx_0
  wire [391 : 0] cx_0$put_datas;
  wire [7 : 0] cx_0$put_sumPrev, cx_0$result;
  wire cx_0$EN_put, cx_0$EN_result, cx_0$RDY_result;

  // ports of submodule cx_1
  wire [391 : 0] cx_1$put_datas;
  wire [7 : 0] cx_1$put_sumPrev, cx_1$result;
  wire cx_1$EN_put, cx_1$EN_result, cx_1$RDY_result;

  // ports of submodule cx_10
  wire [391 : 0] cx_10$put_datas;
  wire [7 : 0] cx_10$put_sumPrev, cx_10$result;
  wire cx_10$EN_put, cx_10$EN_result, cx_10$RDY_result;

  // ports of submodule cx_11
  wire [391 : 0] cx_11$put_datas;
  wire [7 : 0] cx_11$put_sumPrev, cx_11$result;
  wire cx_11$EN_put, cx_11$EN_result, cx_11$RDY_result;

  // ports of submodule cx_12
  wire [391 : 0] cx_12$put_datas;
  wire [7 : 0] cx_12$put_sumPrev, cx_12$result;
  wire cx_12$EN_put, cx_12$EN_result, cx_12$RDY_result;

  // ports of submodule cx_13
  wire [391 : 0] cx_13$put_datas;
  wire [7 : 0] cx_13$put_sumPrev, cx_13$result;
  wire cx_13$EN_put, cx_13$EN_result, cx_13$RDY_result;

  // ports of submodule cx_14
  wire [391 : 0] cx_14$put_datas;
  wire [7 : 0] cx_14$put_sumPrev, cx_14$result;
  wire cx_14$EN_put, cx_14$EN_result, cx_14$RDY_result;

  // ports of submodule cx_15
  wire [391 : 0] cx_15$put_datas;
  wire [7 : 0] cx_15$put_sumPrev, cx_15$result;
  wire cx_15$EN_put, cx_15$EN_result, cx_15$RDY_result;

  // ports of submodule cx_16
  wire [391 : 0] cx_16$put_datas;
  wire [7 : 0] cx_16$put_sumPrev, cx_16$result;
  wire cx_16$EN_put, cx_16$EN_result, cx_16$RDY_result;

  // ports of submodule cx_17
  wire [391 : 0] cx_17$put_datas;
  wire [7 : 0] cx_17$put_sumPrev, cx_17$result;
  wire cx_17$EN_put, cx_17$EN_result, cx_17$RDY_result;

  // ports of submodule cx_18
  wire [391 : 0] cx_18$put_datas;
  wire [7 : 0] cx_18$put_sumPrev, cx_18$result;
  wire cx_18$EN_put, cx_18$EN_result, cx_18$RDY_result;

  // ports of submodule cx_19
  wire [391 : 0] cx_19$put_datas;
  wire [7 : 0] cx_19$put_sumPrev, cx_19$result;
  wire cx_19$EN_put, cx_19$EN_result, cx_19$RDY_result;

  // ports of submodule cx_2
  wire [391 : 0] cx_2$put_datas;
  wire [7 : 0] cx_2$put_sumPrev, cx_2$result;
  wire cx_2$EN_put, cx_2$EN_result, cx_2$RDY_result;

  // ports of submodule cx_20
  wire [391 : 0] cx_20$put_datas;
  wire [7 : 0] cx_20$put_sumPrev, cx_20$result;
  wire cx_20$EN_put, cx_20$EN_result, cx_20$RDY_result;

  // ports of submodule cx_21
  wire [391 : 0] cx_21$put_datas;
  wire [7 : 0] cx_21$put_sumPrev, cx_21$result;
  wire cx_21$EN_put, cx_21$EN_result, cx_21$RDY_result;

  // ports of submodule cx_22
  wire [391 : 0] cx_22$put_datas;
  wire [7 : 0] cx_22$put_sumPrev, cx_22$result;
  wire cx_22$EN_put, cx_22$EN_result, cx_22$RDY_result;

  // ports of submodule cx_23
  wire [391 : 0] cx_23$put_datas;
  wire [7 : 0] cx_23$put_sumPrev, cx_23$result;
  wire cx_23$EN_put, cx_23$EN_result, cx_23$RDY_result;

  // ports of submodule cx_24
  wire [391 : 0] cx_24$put_datas;
  wire [7 : 0] cx_24$put_sumPrev, cx_24$result;
  wire cx_24$EN_put, cx_24$EN_result, cx_24$RDY_result;

  // ports of submodule cx_25
  wire [391 : 0] cx_25$put_datas;
  wire [7 : 0] cx_25$put_sumPrev, cx_25$result;
  wire cx_25$EN_put, cx_25$EN_result, cx_25$RDY_result;

  // ports of submodule cx_26
  wire [391 : 0] cx_26$put_datas;
  wire [7 : 0] cx_26$put_sumPrev, cx_26$result;
  wire cx_26$EN_put, cx_26$EN_result, cx_26$RDY_result;

  // ports of submodule cx_27
  wire [391 : 0] cx_27$put_datas;
  wire [7 : 0] cx_27$put_sumPrev, cx_27$result;
  wire cx_27$EN_put, cx_27$EN_result, cx_27$RDY_result;

  // ports of submodule cx_28
  wire [391 : 0] cx_28$put_datas;
  wire [7 : 0] cx_28$put_sumPrev, cx_28$result;
  wire cx_28$EN_put, cx_28$EN_result, cx_28$RDY_result;

  // ports of submodule cx_29
  wire [391 : 0] cx_29$put_datas;
  wire [7 : 0] cx_29$put_sumPrev, cx_29$result;
  wire cx_29$EN_put, cx_29$EN_result, cx_29$RDY_result;

  // ports of submodule cx_3
  wire [391 : 0] cx_3$put_datas;
  wire [7 : 0] cx_3$put_sumPrev, cx_3$result;
  wire cx_3$EN_put, cx_3$EN_result, cx_3$RDY_result;

  // ports of submodule cx_30
  wire [391 : 0] cx_30$put_datas;
  wire [7 : 0] cx_30$put_sumPrev, cx_30$result;
  wire cx_30$EN_put, cx_30$EN_result, cx_30$RDY_result;

  // ports of submodule cx_31
  wire [391 : 0] cx_31$put_datas;
  wire [7 : 0] cx_31$put_sumPrev, cx_31$result;
  wire cx_31$EN_put, cx_31$EN_result, cx_31$RDY_result;

  // ports of submodule cx_32
  wire [391 : 0] cx_32$put_datas;
  wire [7 : 0] cx_32$put_sumPrev, cx_32$result;
  wire cx_32$EN_put, cx_32$EN_result, cx_32$RDY_result;

  // ports of submodule cx_33
  wire [391 : 0] cx_33$put_datas;
  wire [7 : 0] cx_33$put_sumPrev, cx_33$result;
  wire cx_33$EN_put, cx_33$EN_result, cx_33$RDY_result;

  // ports of submodule cx_34
  wire [391 : 0] cx_34$put_datas;
  wire [7 : 0] cx_34$put_sumPrev, cx_34$result;
  wire cx_34$EN_put, cx_34$EN_result, cx_34$RDY_result;

  // ports of submodule cx_35
  wire [391 : 0] cx_35$put_datas;
  wire [7 : 0] cx_35$put_sumPrev, cx_35$result;
  wire cx_35$EN_put, cx_35$EN_result, cx_35$RDY_result;

  // ports of submodule cx_36
  wire [391 : 0] cx_36$put_datas;
  wire [7 : 0] cx_36$put_sumPrev, cx_36$result;
  wire cx_36$EN_put, cx_36$EN_result, cx_36$RDY_result;

  // ports of submodule cx_37
  wire [391 : 0] cx_37$put_datas;
  wire [7 : 0] cx_37$put_sumPrev, cx_37$result;
  wire cx_37$EN_put, cx_37$EN_result, cx_37$RDY_result;

  // ports of submodule cx_38
  wire [391 : 0] cx_38$put_datas;
  wire [7 : 0] cx_38$put_sumPrev, cx_38$result;
  wire cx_38$EN_put, cx_38$EN_result, cx_38$RDY_result;

  // ports of submodule cx_39
  wire [391 : 0] cx_39$put_datas;
  wire [7 : 0] cx_39$put_sumPrev, cx_39$result;
  wire cx_39$EN_put, cx_39$EN_result, cx_39$RDY_result;

  // ports of submodule cx_4
  wire [391 : 0] cx_4$put_datas;
  wire [7 : 0] cx_4$put_sumPrev, cx_4$result;
  wire cx_4$EN_put, cx_4$EN_result, cx_4$RDY_result;

  // ports of submodule cx_40
  wire [391 : 0] cx_40$put_datas;
  wire [7 : 0] cx_40$put_sumPrev, cx_40$result;
  wire cx_40$EN_put, cx_40$EN_result, cx_40$RDY_result;

  // ports of submodule cx_41
  wire [391 : 0] cx_41$put_datas;
  wire [7 : 0] cx_41$put_sumPrev, cx_41$result;
  wire cx_41$EN_put, cx_41$EN_result, cx_41$RDY_result;

  // ports of submodule cx_42
  wire [391 : 0] cx_42$put_datas;
  wire [7 : 0] cx_42$put_sumPrev, cx_42$result;
  wire cx_42$EN_put, cx_42$EN_result, cx_42$RDY_result;

  // ports of submodule cx_43
  wire [391 : 0] cx_43$put_datas;
  wire [7 : 0] cx_43$put_sumPrev, cx_43$result;
  wire cx_43$EN_put, cx_43$EN_result, cx_43$RDY_result;

  // ports of submodule cx_44
  wire [391 : 0] cx_44$put_datas;
  wire [7 : 0] cx_44$put_sumPrev, cx_44$result;
  wire cx_44$EN_put, cx_44$EN_result, cx_44$RDY_result;

  // ports of submodule cx_45
  wire [391 : 0] cx_45$put_datas;
  wire [7 : 0] cx_45$put_sumPrev, cx_45$result;
  wire cx_45$EN_put, cx_45$EN_result, cx_45$RDY_result;

  // ports of submodule cx_46
  wire [391 : 0] cx_46$put_datas;
  wire [7 : 0] cx_46$put_sumPrev, cx_46$result;
  wire cx_46$EN_put, cx_46$EN_result, cx_46$RDY_result;

  // ports of submodule cx_47
  wire [391 : 0] cx_47$put_datas;
  wire [7 : 0] cx_47$put_sumPrev, cx_47$result;
  wire cx_47$EN_put, cx_47$EN_result, cx_47$RDY_result;

  // ports of submodule cx_48
  wire [391 : 0] cx_48$put_datas;
  wire [7 : 0] cx_48$put_sumPrev, cx_48$result;
  wire cx_48$EN_put, cx_48$EN_result, cx_48$RDY_result;

  // ports of submodule cx_49
  wire [391 : 0] cx_49$put_datas;
  wire [7 : 0] cx_49$put_sumPrev, cx_49$result;
  wire cx_49$EN_put, cx_49$EN_result, cx_49$RDY_result;

  // ports of submodule cx_5
  wire [391 : 0] cx_5$put_datas;
  wire [7 : 0] cx_5$put_sumPrev, cx_5$result;
  wire cx_5$EN_put, cx_5$EN_result, cx_5$RDY_result;

  // ports of submodule cx_50
  wire [391 : 0] cx_50$put_datas;
  wire [7 : 0] cx_50$put_sumPrev, cx_50$result;
  wire cx_50$EN_put, cx_50$EN_result, cx_50$RDY_result;

  // ports of submodule cx_51
  wire [391 : 0] cx_51$put_datas;
  wire [7 : 0] cx_51$put_sumPrev, cx_51$result;
  wire cx_51$EN_put, cx_51$EN_result, cx_51$RDY_result;

  // ports of submodule cx_52
  wire [391 : 0] cx_52$put_datas;
  wire [7 : 0] cx_52$put_sumPrev, cx_52$result;
  wire cx_52$EN_put, cx_52$EN_result, cx_52$RDY_result;

  // ports of submodule cx_53
  wire [391 : 0] cx_53$put_datas;
  wire [7 : 0] cx_53$put_sumPrev, cx_53$result;
  wire cx_53$EN_put, cx_53$EN_result, cx_53$RDY_result;

  // ports of submodule cx_54
  wire [391 : 0] cx_54$put_datas;
  wire [7 : 0] cx_54$put_sumPrev, cx_54$result;
  wire cx_54$EN_put, cx_54$EN_result, cx_54$RDY_result;

  // ports of submodule cx_55
  wire [391 : 0] cx_55$put_datas;
  wire [7 : 0] cx_55$put_sumPrev, cx_55$result;
  wire cx_55$EN_put, cx_55$EN_result, cx_55$RDY_result;

  // ports of submodule cx_56
  wire [391 : 0] cx_56$put_datas;
  wire [7 : 0] cx_56$put_sumPrev, cx_56$result;
  wire cx_56$EN_put, cx_56$EN_result, cx_56$RDY_result;

  // ports of submodule cx_57
  wire [391 : 0] cx_57$put_datas;
  wire [7 : 0] cx_57$put_sumPrev, cx_57$result;
  wire cx_57$EN_put, cx_57$EN_result, cx_57$RDY_result;

  // ports of submodule cx_58
  wire [391 : 0] cx_58$put_datas;
  wire [7 : 0] cx_58$put_sumPrev, cx_58$result;
  wire cx_58$EN_put, cx_58$EN_result, cx_58$RDY_result;

  // ports of submodule cx_59
  wire [391 : 0] cx_59$put_datas;
  wire [7 : 0] cx_59$put_sumPrev, cx_59$result;
  wire cx_59$EN_put, cx_59$EN_result, cx_59$RDY_result;

  // ports of submodule cx_6
  wire [391 : 0] cx_6$put_datas;
  wire [7 : 0] cx_6$put_sumPrev, cx_6$result;
  wire cx_6$EN_put, cx_6$EN_result, cx_6$RDY_result;

  // ports of submodule cx_60
  wire [391 : 0] cx_60$put_datas;
  wire [7 : 0] cx_60$put_sumPrev, cx_60$result;
  wire cx_60$EN_put, cx_60$EN_result, cx_60$RDY_result;

  // ports of submodule cx_61
  wire [391 : 0] cx_61$put_datas;
  wire [7 : 0] cx_61$put_sumPrev, cx_61$result;
  wire cx_61$EN_put, cx_61$EN_result, cx_61$RDY_result;

  // ports of submodule cx_62
  wire [391 : 0] cx_62$put_datas;
  wire [7 : 0] cx_62$put_sumPrev, cx_62$result;
  wire cx_62$EN_put, cx_62$EN_result, cx_62$RDY_result;

  // ports of submodule cx_63
  wire [391 : 0] cx_63$put_datas;
  wire [7 : 0] cx_63$put_sumPrev, cx_63$result;
  wire cx_63$EN_put, cx_63$EN_result, cx_63$RDY_result;

  // ports of submodule cx_7
  wire [391 : 0] cx_7$put_datas;
  wire [7 : 0] cx_7$put_sumPrev, cx_7$result;
  wire cx_7$EN_put, cx_7$EN_result, cx_7$RDY_result;

  // ports of submodule cx_8
  wire [391 : 0] cx_8$put_datas;
  wire [7 : 0] cx_8$put_sumPrev, cx_8$result;
  wire cx_8$EN_put, cx_8$EN_result, cx_8$RDY_result;

  // ports of submodule cx_9
  wire [391 : 0] cx_9$put_datas;
  wire [7 : 0] cx_9$put_sumPrev, cx_9$result;
  wire cx_9$EN_put, cx_9$EN_result, cx_9$RDY_result;

  // ports of submodule outQ
  wire [7 : 0] outQ$D_IN, outQ$D_OUT;
  wire outQ$CLR, outQ$DEQ, outQ$EMPTY_N, outQ$ENQ, outQ$FULL_N;

  // ports of submodule px
  wire [25087 : 0] px$get;
  wire [559 : 0] px$put_datas;
  wire [11 : 0] px$configure_wx;
  wire [7 : 0] px$configure_m;
  wire [3 : 0] px$configure_a;
  wire px$EN_configure, px$EN_get, px$EN_put, px$RDY_get, px$RDY_put;

  // rule scheduling signals
  wire WILL_FIRE_RL__getFinal;

  // inputs to muxes for submodule ports
  wire MUX_fetch$write_1__SEL_2;

  // remaining internal signals
  wire [543 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d244;
  wire [527 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d237;
  wire [495 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d223;
  wire [463 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d209;
  wire [431 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d195;
  wire [399 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d181;
  wire [367 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d167;
  wire [335 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d153;
  wire [303 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d139;
  wire [271 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d125;
  wire [239 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d111;
  wire [207 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d97;
  wire [175 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d83;
  wire [143 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d69;
  wire [111 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d55;
  wire [79 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d41;
  wire [47 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d27;
  wire [31 : 0] _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d20;
  wire [15 : 0] _10_MUL_value___d213,
		_11_MUL_value___d210,
		_12_MUL_value___d206,
		_13_MUL_value___d203,
		_14_MUL_value___d199,
		_15_MUL_value___d196,
		_17_MUL_value___d189,
		_18_MUL_value___d185,
		_19_MUL_value___d182,
		_20_MUL_value___d178,
		_21_MUL_value___d175,
		_22_MUL_value___d171,
		_23_MUL_value___d168,
		_24_MUL_value___d164,
		_25_MUL_value___d161,
		_26_MUL_value___d157,
		_27_MUL_value___d154,
		_28_MUL_value___d150,
		_29_MUL_value___d147,
		_30_MUL_value___d143,
		_31_MUL_value___d140,
		_33_MUL_value___d133,
		_34_MUL_value___d129,
		_35_MUL_value___d126,
		_36_MUL_value___d122,
		_37_MUL_value___d119,
		_38_MUL_value___d115,
		_39_MUL_value___d112,
		_3_MUL_value___d238,
		_40_MUL_value___d108,
		_41_MUL_value___d105,
		_42_MUL_value___d101,
		_43_MUL_value___d98,
		_44_MUL_value___d94,
		_45_MUL_value___d91,
		_46_MUL_value___d87,
		_47_MUL_value___d84,
		_48_MUL_value___d80,
		_49_MUL_value___d77,
		_50_MUL_value___d73,
		_51_MUL_value___d70,
		_52_MUL_value___d66,
		_53_MUL_value___d63,
		_54_MUL_value___d59,
		_55_MUL_value___d56,
		_56_MUL_value___d52,
		_57_MUL_value___d49,
		_58_MUL_value___d45,
		_59_MUL_value___d42,
		_5_MUL_value___d231,
		_60_MUL_value___d38,
		_61_MUL_value___d35,
		_62_MUL_value___d31,
		_63_MUL_value___d28,
		_65_MUL_value___d21,
		_66_MUL_value___d17,
		_67_MUL_value___d14,
		_68_MUL_value___d10,
		_69_MUL_value___d6,
		_6_MUL_value___d227,
		_7_MUL_value___d224,
		_9_MUL_value___d217;

  // actionvalue method get
  assign get = { 24'd0, outQ$D_OUT } ;
  assign RDY_get = outQ$EMPTY_N ;

  // action method put
  assign RDY_put = 1'd1 ;

  // action method configure
  assign RDY_configure = 1'd1 ;

  // submodule cx_0
  mkConv cx_0(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_0$put_datas),
	      .put_sumPrev(cx_0$put_sumPrev),
	      .EN_put(cx_0$EN_put),
	      .EN_result(cx_0$EN_result),
	      .RDY_put(),
	      .result(cx_0$result),
	      .RDY_result(cx_0$RDY_result));

  // submodule cx_1
  mkConv cx_1(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_1$put_datas),
	      .put_sumPrev(cx_1$put_sumPrev),
	      .EN_put(cx_1$EN_put),
	      .EN_result(cx_1$EN_result),
	      .RDY_put(),
	      .result(cx_1$result),
	      .RDY_result(cx_1$RDY_result));

  // submodule cx_10
  mkConv cx_10(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_10$put_datas),
	       .put_sumPrev(cx_10$put_sumPrev),
	       .EN_put(cx_10$EN_put),
	       .EN_result(cx_10$EN_result),
	       .RDY_put(),
	       .result(cx_10$result),
	       .RDY_result(cx_10$RDY_result));

  // submodule cx_11
  mkConv cx_11(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_11$put_datas),
	       .put_sumPrev(cx_11$put_sumPrev),
	       .EN_put(cx_11$EN_put),
	       .EN_result(cx_11$EN_result),
	       .RDY_put(),
	       .result(cx_11$result),
	       .RDY_result(cx_11$RDY_result));

  // submodule cx_12
  mkConv cx_12(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_12$put_datas),
	       .put_sumPrev(cx_12$put_sumPrev),
	       .EN_put(cx_12$EN_put),
	       .EN_result(cx_12$EN_result),
	       .RDY_put(),
	       .result(cx_12$result),
	       .RDY_result(cx_12$RDY_result));

  // submodule cx_13
  mkConv cx_13(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_13$put_datas),
	       .put_sumPrev(cx_13$put_sumPrev),
	       .EN_put(cx_13$EN_put),
	       .EN_result(cx_13$EN_result),
	       .RDY_put(),
	       .result(cx_13$result),
	       .RDY_result(cx_13$RDY_result));

  // submodule cx_14
  mkConv cx_14(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_14$put_datas),
	       .put_sumPrev(cx_14$put_sumPrev),
	       .EN_put(cx_14$EN_put),
	       .EN_result(cx_14$EN_result),
	       .RDY_put(),
	       .result(cx_14$result),
	       .RDY_result(cx_14$RDY_result));

  // submodule cx_15
  mkConv cx_15(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_15$put_datas),
	       .put_sumPrev(cx_15$put_sumPrev),
	       .EN_put(cx_15$EN_put),
	       .EN_result(cx_15$EN_result),
	       .RDY_put(),
	       .result(cx_15$result),
	       .RDY_result(cx_15$RDY_result));

  // submodule cx_16
  mkConv cx_16(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_16$put_datas),
	       .put_sumPrev(cx_16$put_sumPrev),
	       .EN_put(cx_16$EN_put),
	       .EN_result(cx_16$EN_result),
	       .RDY_put(),
	       .result(cx_16$result),
	       .RDY_result(cx_16$RDY_result));

  // submodule cx_17
  mkConv cx_17(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_17$put_datas),
	       .put_sumPrev(cx_17$put_sumPrev),
	       .EN_put(cx_17$EN_put),
	       .EN_result(cx_17$EN_result),
	       .RDY_put(),
	       .result(cx_17$result),
	       .RDY_result(cx_17$RDY_result));

  // submodule cx_18
  mkConv cx_18(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_18$put_datas),
	       .put_sumPrev(cx_18$put_sumPrev),
	       .EN_put(cx_18$EN_put),
	       .EN_result(cx_18$EN_result),
	       .RDY_put(),
	       .result(cx_18$result),
	       .RDY_result(cx_18$RDY_result));

  // submodule cx_19
  mkConv cx_19(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_19$put_datas),
	       .put_sumPrev(cx_19$put_sumPrev),
	       .EN_put(cx_19$EN_put),
	       .EN_result(cx_19$EN_result),
	       .RDY_put(),
	       .result(cx_19$result),
	       .RDY_result(cx_19$RDY_result));

  // submodule cx_2
  mkConv cx_2(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_2$put_datas),
	      .put_sumPrev(cx_2$put_sumPrev),
	      .EN_put(cx_2$EN_put),
	      .EN_result(cx_2$EN_result),
	      .RDY_put(),
	      .result(cx_2$result),
	      .RDY_result(cx_2$RDY_result));

  // submodule cx_20
  mkConv cx_20(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_20$put_datas),
	       .put_sumPrev(cx_20$put_sumPrev),
	       .EN_put(cx_20$EN_put),
	       .EN_result(cx_20$EN_result),
	       .RDY_put(),
	       .result(cx_20$result),
	       .RDY_result(cx_20$RDY_result));

  // submodule cx_21
  mkConv cx_21(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_21$put_datas),
	       .put_sumPrev(cx_21$put_sumPrev),
	       .EN_put(cx_21$EN_put),
	       .EN_result(cx_21$EN_result),
	       .RDY_put(),
	       .result(cx_21$result),
	       .RDY_result(cx_21$RDY_result));

  // submodule cx_22
  mkConv cx_22(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_22$put_datas),
	       .put_sumPrev(cx_22$put_sumPrev),
	       .EN_put(cx_22$EN_put),
	       .EN_result(cx_22$EN_result),
	       .RDY_put(),
	       .result(cx_22$result),
	       .RDY_result(cx_22$RDY_result));

  // submodule cx_23
  mkConv cx_23(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_23$put_datas),
	       .put_sumPrev(cx_23$put_sumPrev),
	       .EN_put(cx_23$EN_put),
	       .EN_result(cx_23$EN_result),
	       .RDY_put(),
	       .result(cx_23$result),
	       .RDY_result(cx_23$RDY_result));

  // submodule cx_24
  mkConv cx_24(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_24$put_datas),
	       .put_sumPrev(cx_24$put_sumPrev),
	       .EN_put(cx_24$EN_put),
	       .EN_result(cx_24$EN_result),
	       .RDY_put(),
	       .result(cx_24$result),
	       .RDY_result(cx_24$RDY_result));

  // submodule cx_25
  mkConv cx_25(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_25$put_datas),
	       .put_sumPrev(cx_25$put_sumPrev),
	       .EN_put(cx_25$EN_put),
	       .EN_result(cx_25$EN_result),
	       .RDY_put(),
	       .result(cx_25$result),
	       .RDY_result(cx_25$RDY_result));

  // submodule cx_26
  mkConv cx_26(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_26$put_datas),
	       .put_sumPrev(cx_26$put_sumPrev),
	       .EN_put(cx_26$EN_put),
	       .EN_result(cx_26$EN_result),
	       .RDY_put(),
	       .result(cx_26$result),
	       .RDY_result(cx_26$RDY_result));

  // submodule cx_27
  mkConv cx_27(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_27$put_datas),
	       .put_sumPrev(cx_27$put_sumPrev),
	       .EN_put(cx_27$EN_put),
	       .EN_result(cx_27$EN_result),
	       .RDY_put(),
	       .result(cx_27$result),
	       .RDY_result(cx_27$RDY_result));

  // submodule cx_28
  mkConv cx_28(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_28$put_datas),
	       .put_sumPrev(cx_28$put_sumPrev),
	       .EN_put(cx_28$EN_put),
	       .EN_result(cx_28$EN_result),
	       .RDY_put(),
	       .result(cx_28$result),
	       .RDY_result(cx_28$RDY_result));

  // submodule cx_29
  mkConv cx_29(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_29$put_datas),
	       .put_sumPrev(cx_29$put_sumPrev),
	       .EN_put(cx_29$EN_put),
	       .EN_result(cx_29$EN_result),
	       .RDY_put(),
	       .result(cx_29$result),
	       .RDY_result(cx_29$RDY_result));

  // submodule cx_3
  mkConv cx_3(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_3$put_datas),
	      .put_sumPrev(cx_3$put_sumPrev),
	      .EN_put(cx_3$EN_put),
	      .EN_result(cx_3$EN_result),
	      .RDY_put(),
	      .result(cx_3$result),
	      .RDY_result(cx_3$RDY_result));

  // submodule cx_30
  mkConv cx_30(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_30$put_datas),
	       .put_sumPrev(cx_30$put_sumPrev),
	       .EN_put(cx_30$EN_put),
	       .EN_result(cx_30$EN_result),
	       .RDY_put(),
	       .result(cx_30$result),
	       .RDY_result(cx_30$RDY_result));

  // submodule cx_31
  mkConv cx_31(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_31$put_datas),
	       .put_sumPrev(cx_31$put_sumPrev),
	       .EN_put(cx_31$EN_put),
	       .EN_result(cx_31$EN_result),
	       .RDY_put(),
	       .result(cx_31$result),
	       .RDY_result(cx_31$RDY_result));

  // submodule cx_32
  mkConv cx_32(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_32$put_datas),
	       .put_sumPrev(cx_32$put_sumPrev),
	       .EN_put(cx_32$EN_put),
	       .EN_result(cx_32$EN_result),
	       .RDY_put(),
	       .result(cx_32$result),
	       .RDY_result(cx_32$RDY_result));

  // submodule cx_33
  mkConv cx_33(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_33$put_datas),
	       .put_sumPrev(cx_33$put_sumPrev),
	       .EN_put(cx_33$EN_put),
	       .EN_result(cx_33$EN_result),
	       .RDY_put(),
	       .result(cx_33$result),
	       .RDY_result(cx_33$RDY_result));

  // submodule cx_34
  mkConv cx_34(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_34$put_datas),
	       .put_sumPrev(cx_34$put_sumPrev),
	       .EN_put(cx_34$EN_put),
	       .EN_result(cx_34$EN_result),
	       .RDY_put(),
	       .result(cx_34$result),
	       .RDY_result(cx_34$RDY_result));

  // submodule cx_35
  mkConv cx_35(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_35$put_datas),
	       .put_sumPrev(cx_35$put_sumPrev),
	       .EN_put(cx_35$EN_put),
	       .EN_result(cx_35$EN_result),
	       .RDY_put(),
	       .result(cx_35$result),
	       .RDY_result(cx_35$RDY_result));

  // submodule cx_36
  mkConv cx_36(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_36$put_datas),
	       .put_sumPrev(cx_36$put_sumPrev),
	       .EN_put(cx_36$EN_put),
	       .EN_result(cx_36$EN_result),
	       .RDY_put(),
	       .result(cx_36$result),
	       .RDY_result(cx_36$RDY_result));

  // submodule cx_37
  mkConv cx_37(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_37$put_datas),
	       .put_sumPrev(cx_37$put_sumPrev),
	       .EN_put(cx_37$EN_put),
	       .EN_result(cx_37$EN_result),
	       .RDY_put(),
	       .result(cx_37$result),
	       .RDY_result(cx_37$RDY_result));

  // submodule cx_38
  mkConv cx_38(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_38$put_datas),
	       .put_sumPrev(cx_38$put_sumPrev),
	       .EN_put(cx_38$EN_put),
	       .EN_result(cx_38$EN_result),
	       .RDY_put(),
	       .result(cx_38$result),
	       .RDY_result(cx_38$RDY_result));

  // submodule cx_39
  mkConv cx_39(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_39$put_datas),
	       .put_sumPrev(cx_39$put_sumPrev),
	       .EN_put(cx_39$EN_put),
	       .EN_result(cx_39$EN_result),
	       .RDY_put(),
	       .result(cx_39$result),
	       .RDY_result(cx_39$RDY_result));

  // submodule cx_4
  mkConv cx_4(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_4$put_datas),
	      .put_sumPrev(cx_4$put_sumPrev),
	      .EN_put(cx_4$EN_put),
	      .EN_result(cx_4$EN_result),
	      .RDY_put(),
	      .result(cx_4$result),
	      .RDY_result(cx_4$RDY_result));

  // submodule cx_40
  mkConv cx_40(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_40$put_datas),
	       .put_sumPrev(cx_40$put_sumPrev),
	       .EN_put(cx_40$EN_put),
	       .EN_result(cx_40$EN_result),
	       .RDY_put(),
	       .result(cx_40$result),
	       .RDY_result(cx_40$RDY_result));

  // submodule cx_41
  mkConv cx_41(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_41$put_datas),
	       .put_sumPrev(cx_41$put_sumPrev),
	       .EN_put(cx_41$EN_put),
	       .EN_result(cx_41$EN_result),
	       .RDY_put(),
	       .result(cx_41$result),
	       .RDY_result(cx_41$RDY_result));

  // submodule cx_42
  mkConv cx_42(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_42$put_datas),
	       .put_sumPrev(cx_42$put_sumPrev),
	       .EN_put(cx_42$EN_put),
	       .EN_result(cx_42$EN_result),
	       .RDY_put(),
	       .result(cx_42$result),
	       .RDY_result(cx_42$RDY_result));

  // submodule cx_43
  mkConv cx_43(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_43$put_datas),
	       .put_sumPrev(cx_43$put_sumPrev),
	       .EN_put(cx_43$EN_put),
	       .EN_result(cx_43$EN_result),
	       .RDY_put(),
	       .result(cx_43$result),
	       .RDY_result(cx_43$RDY_result));

  // submodule cx_44
  mkConv cx_44(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_44$put_datas),
	       .put_sumPrev(cx_44$put_sumPrev),
	       .EN_put(cx_44$EN_put),
	       .EN_result(cx_44$EN_result),
	       .RDY_put(),
	       .result(cx_44$result),
	       .RDY_result(cx_44$RDY_result));

  // submodule cx_45
  mkConv cx_45(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_45$put_datas),
	       .put_sumPrev(cx_45$put_sumPrev),
	       .EN_put(cx_45$EN_put),
	       .EN_result(cx_45$EN_result),
	       .RDY_put(),
	       .result(cx_45$result),
	       .RDY_result(cx_45$RDY_result));

  // submodule cx_46
  mkConv cx_46(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_46$put_datas),
	       .put_sumPrev(cx_46$put_sumPrev),
	       .EN_put(cx_46$EN_put),
	       .EN_result(cx_46$EN_result),
	       .RDY_put(),
	       .result(cx_46$result),
	       .RDY_result(cx_46$RDY_result));

  // submodule cx_47
  mkConv cx_47(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_47$put_datas),
	       .put_sumPrev(cx_47$put_sumPrev),
	       .EN_put(cx_47$EN_put),
	       .EN_result(cx_47$EN_result),
	       .RDY_put(),
	       .result(cx_47$result),
	       .RDY_result(cx_47$RDY_result));

  // submodule cx_48
  mkConv cx_48(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_48$put_datas),
	       .put_sumPrev(cx_48$put_sumPrev),
	       .EN_put(cx_48$EN_put),
	       .EN_result(cx_48$EN_result),
	       .RDY_put(),
	       .result(cx_48$result),
	       .RDY_result(cx_48$RDY_result));

  // submodule cx_49
  mkConv cx_49(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_49$put_datas),
	       .put_sumPrev(cx_49$put_sumPrev),
	       .EN_put(cx_49$EN_put),
	       .EN_result(cx_49$EN_result),
	       .RDY_put(),
	       .result(cx_49$result),
	       .RDY_result(cx_49$RDY_result));

  // submodule cx_5
  mkConv cx_5(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_5$put_datas),
	      .put_sumPrev(cx_5$put_sumPrev),
	      .EN_put(cx_5$EN_put),
	      .EN_result(cx_5$EN_result),
	      .RDY_put(),
	      .result(cx_5$result),
	      .RDY_result(cx_5$RDY_result));

  // submodule cx_50
  mkConv cx_50(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_50$put_datas),
	       .put_sumPrev(cx_50$put_sumPrev),
	       .EN_put(cx_50$EN_put),
	       .EN_result(cx_50$EN_result),
	       .RDY_put(),
	       .result(cx_50$result),
	       .RDY_result(cx_50$RDY_result));

  // submodule cx_51
  mkConv cx_51(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_51$put_datas),
	       .put_sumPrev(cx_51$put_sumPrev),
	       .EN_put(cx_51$EN_put),
	       .EN_result(cx_51$EN_result),
	       .RDY_put(),
	       .result(cx_51$result),
	       .RDY_result(cx_51$RDY_result));

  // submodule cx_52
  mkConv cx_52(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_52$put_datas),
	       .put_sumPrev(cx_52$put_sumPrev),
	       .EN_put(cx_52$EN_put),
	       .EN_result(cx_52$EN_result),
	       .RDY_put(),
	       .result(cx_52$result),
	       .RDY_result(cx_52$RDY_result));

  // submodule cx_53
  mkConv cx_53(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_53$put_datas),
	       .put_sumPrev(cx_53$put_sumPrev),
	       .EN_put(cx_53$EN_put),
	       .EN_result(cx_53$EN_result),
	       .RDY_put(),
	       .result(cx_53$result),
	       .RDY_result(cx_53$RDY_result));

  // submodule cx_54
  mkConv cx_54(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_54$put_datas),
	       .put_sumPrev(cx_54$put_sumPrev),
	       .EN_put(cx_54$EN_put),
	       .EN_result(cx_54$EN_result),
	       .RDY_put(),
	       .result(cx_54$result),
	       .RDY_result(cx_54$RDY_result));

  // submodule cx_55
  mkConv cx_55(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_55$put_datas),
	       .put_sumPrev(cx_55$put_sumPrev),
	       .EN_put(cx_55$EN_put),
	       .EN_result(cx_55$EN_result),
	       .RDY_put(),
	       .result(cx_55$result),
	       .RDY_result(cx_55$RDY_result));

  // submodule cx_56
  mkConv cx_56(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_56$put_datas),
	       .put_sumPrev(cx_56$put_sumPrev),
	       .EN_put(cx_56$EN_put),
	       .EN_result(cx_56$EN_result),
	       .RDY_put(),
	       .result(cx_56$result),
	       .RDY_result(cx_56$RDY_result));

  // submodule cx_57
  mkConv cx_57(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_57$put_datas),
	       .put_sumPrev(cx_57$put_sumPrev),
	       .EN_put(cx_57$EN_put),
	       .EN_result(cx_57$EN_result),
	       .RDY_put(),
	       .result(cx_57$result),
	       .RDY_result(cx_57$RDY_result));

  // submodule cx_58
  mkConv cx_58(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_58$put_datas),
	       .put_sumPrev(cx_58$put_sumPrev),
	       .EN_put(cx_58$EN_put),
	       .EN_result(cx_58$EN_result),
	       .RDY_put(),
	       .result(cx_58$result),
	       .RDY_result(cx_58$RDY_result));

  // submodule cx_59
  mkConv cx_59(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_59$put_datas),
	       .put_sumPrev(cx_59$put_sumPrev),
	       .EN_put(cx_59$EN_put),
	       .EN_result(cx_59$EN_result),
	       .RDY_put(),
	       .result(cx_59$result),
	       .RDY_result(cx_59$RDY_result));

  // submodule cx_6
  mkConv cx_6(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_6$put_datas),
	      .put_sumPrev(cx_6$put_sumPrev),
	      .EN_put(cx_6$EN_put),
	      .EN_result(cx_6$EN_result),
	      .RDY_put(),
	      .result(cx_6$result),
	      .RDY_result(cx_6$RDY_result));

  // submodule cx_60
  mkConv cx_60(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_60$put_datas),
	       .put_sumPrev(cx_60$put_sumPrev),
	       .EN_put(cx_60$EN_put),
	       .EN_result(cx_60$EN_result),
	       .RDY_put(),
	       .result(cx_60$result),
	       .RDY_result(cx_60$RDY_result));

  // submodule cx_61
  mkConv cx_61(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_61$put_datas),
	       .put_sumPrev(cx_61$put_sumPrev),
	       .EN_put(cx_61$EN_put),
	       .EN_result(cx_61$EN_result),
	       .RDY_put(),
	       .result(cx_61$result),
	       .RDY_result(cx_61$RDY_result));

  // submodule cx_62
  mkConv cx_62(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_62$put_datas),
	       .put_sumPrev(cx_62$put_sumPrev),
	       .EN_put(cx_62$EN_put),
	       .EN_result(cx_62$EN_result),
	       .RDY_put(),
	       .result(cx_62$result),
	       .RDY_result(cx_62$RDY_result));

  // submodule cx_63
  mkConv cx_63(.CLK(CLK),
	       .RST_N(RST_N),
	       .put_datas(cx_63$put_datas),
	       .put_sumPrev(cx_63$put_sumPrev),
	       .EN_put(cx_63$EN_put),
	       .EN_result(cx_63$EN_result),
	       .RDY_put(),
	       .result(cx_63$result),
	       .RDY_result(cx_63$RDY_result));

  // submodule cx_7
  mkConv cx_7(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_7$put_datas),
	      .put_sumPrev(cx_7$put_sumPrev),
	      .EN_put(cx_7$EN_put),
	      .EN_result(cx_7$EN_result),
	      .RDY_put(),
	      .result(cx_7$result),
	      .RDY_result(cx_7$RDY_result));

  // submodule cx_8
  mkConv cx_8(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_8$put_datas),
	      .put_sumPrev(cx_8$put_sumPrev),
	      .EN_put(cx_8$EN_put),
	      .EN_result(cx_8$EN_result),
	      .RDY_put(),
	      .result(cx_8$result),
	      .RDY_result(cx_8$RDY_result));

  // submodule cx_9
  mkConv cx_9(.CLK(CLK),
	      .RST_N(RST_N),
	      .put_datas(cx_9$put_datas),
	      .put_sumPrev(cx_9$put_sumPrev),
	      .EN_put(cx_9$EN_put),
	      .EN_result(cx_9$EN_result),
	      .RDY_put(),
	      .result(cx_9$result),
	      .RDY_result(cx_9$RDY_result));

  // submodule outQ
  FIFO2 #(.width(32'd8), .guarded(1'd1)) outQ(.RST(RST_N),
					      .CLK(CLK),
					      .D_IN(outQ$D_IN),
					      .ENQ(outQ$ENQ),
					      .DEQ(outQ$DEQ),
					      .CLR(outQ$CLR),
					      .D_OUT(outQ$D_OUT),
					      .FULL_N(outQ$FULL_N),
					      .EMPTY_N(outQ$EMPTY_N));

  // submodule px
  mkMerge px(.CLK(CLK),
	     .RST_N(RST_N),
	     .configure_a(px$configure_a),
	     .configure_m(px$configure_m),
	     .configure_wx(px$configure_wx),
	     .put_datas(px$put_datas),
	     .EN_put(px$EN_put),
	     .EN_get(px$EN_get),
	     .EN_configure(px$EN_configure),
	     .RDY_put(px$RDY_put),
	     .get(px$get),
	     .RDY_get(px$RDY_get),
	     .RDY_configure());

  // rule RL__getFinal
  assign WILL_FIRE_RL__getFinal = cx_63$RDY_result && outQ$FULL_N ;

  // inputs to muxes for submodule ports
  assign MUX_fetch$write_1__SEL_2 = px$RDY_get && fetch ;

  // register count
  assign count$D_IN = 32'h0 ;
  assign count$EN = 1'b0 ;

  // register fetch
  assign fetch$D_IN = WILL_FIRE_RL__getFinal ;
  assign fetch$EN = px$RDY_get && fetch || WILL_FIRE_RL__getFinal ;

  // register index
  assign index$D_IN = configure_wxx ;
  assign index$EN = EN_configure ;

  // register init
  assign init$D_IN = 1'd1 ;
  assign init$EN = EN_configure ;

  // register out
  assign out$D_IN = px$get ;
  assign out$EN = MUX_fetch$write_1__SEL_2 ;

  // register seed
  assign seed$D_IN = put_datas ;
  assign seed$EN = EN_put ;

  // register value
  assign value$D_IN = value + 8'd1 ;
  assign value$EN = px$RDY_put && init ;

  // submodule cx_0
  assign cx_0$put_datas = out[391:0] ;
  assign cx_0$put_sumPrev = 8'd0 ;
  assign cx_0$EN_put = 1'd1 ;
  assign cx_0$EN_result = cx_0$RDY_result ;

  // submodule cx_1
  assign cx_1$put_datas = out[783:392] ;
  assign cx_1$put_sumPrev = cx_0$result ;
  assign cx_1$EN_put = cx_0$RDY_result ;
  assign cx_1$EN_result = cx_1$RDY_result ;

  // submodule cx_10
  assign cx_10$put_datas = out[4311:3920] ;
  assign cx_10$put_sumPrev = cx_9$result ;
  assign cx_10$EN_put = cx_9$RDY_result ;
  assign cx_10$EN_result = cx_10$RDY_result ;

  // submodule cx_11
  assign cx_11$put_datas = out[4703:4312] ;
  assign cx_11$put_sumPrev = cx_10$result ;
  assign cx_11$EN_put = cx_10$RDY_result ;
  assign cx_11$EN_result = cx_11$RDY_result ;

  // submodule cx_12
  assign cx_12$put_datas = out[5095:4704] ;
  assign cx_12$put_sumPrev = cx_11$result ;
  assign cx_12$EN_put = cx_11$RDY_result ;
  assign cx_12$EN_result = cx_12$RDY_result ;

  // submodule cx_13
  assign cx_13$put_datas = out[5487:5096] ;
  assign cx_13$put_sumPrev = cx_12$result ;
  assign cx_13$EN_put = cx_12$RDY_result ;
  assign cx_13$EN_result = cx_13$RDY_result ;

  // submodule cx_14
  assign cx_14$put_datas = out[5879:5488] ;
  assign cx_14$put_sumPrev = cx_13$result ;
  assign cx_14$EN_put = cx_13$RDY_result ;
  assign cx_14$EN_result = cx_14$RDY_result ;

  // submodule cx_15
  assign cx_15$put_datas = out[6271:5880] ;
  assign cx_15$put_sumPrev = cx_14$result ;
  assign cx_15$EN_put = cx_14$RDY_result ;
  assign cx_15$EN_result = cx_15$RDY_result ;

  // submodule cx_16
  assign cx_16$put_datas = out[6663:6272] ;
  assign cx_16$put_sumPrev = cx_15$result ;
  assign cx_16$EN_put = cx_15$RDY_result ;
  assign cx_16$EN_result = cx_16$RDY_result ;

  // submodule cx_17
  assign cx_17$put_datas = out[7055:6664] ;
  assign cx_17$put_sumPrev = cx_16$result ;
  assign cx_17$EN_put = cx_16$RDY_result ;
  assign cx_17$EN_result = cx_17$RDY_result ;

  // submodule cx_18
  assign cx_18$put_datas = out[7447:7056] ;
  assign cx_18$put_sumPrev = cx_17$result ;
  assign cx_18$EN_put = cx_17$RDY_result ;
  assign cx_18$EN_result = cx_18$RDY_result ;

  // submodule cx_19
  assign cx_19$put_datas = out[7839:7448] ;
  assign cx_19$put_sumPrev = cx_18$result ;
  assign cx_19$EN_put = cx_18$RDY_result ;
  assign cx_19$EN_result = cx_19$RDY_result ;

  // submodule cx_2
  assign cx_2$put_datas = out[1175:784] ;
  assign cx_2$put_sumPrev = cx_1$result ;
  assign cx_2$EN_put = cx_1$RDY_result ;
  assign cx_2$EN_result = cx_2$RDY_result ;

  // submodule cx_20
  assign cx_20$put_datas = out[8231:7840] ;
  assign cx_20$put_sumPrev = cx_19$result ;
  assign cx_20$EN_put = cx_19$RDY_result ;
  assign cx_20$EN_result = cx_20$RDY_result ;

  // submodule cx_21
  assign cx_21$put_datas = out[8623:8232] ;
  assign cx_21$put_sumPrev = cx_20$result ;
  assign cx_21$EN_put = cx_20$RDY_result ;
  assign cx_21$EN_result = cx_21$RDY_result ;

  // submodule cx_22
  assign cx_22$put_datas = out[9015:8624] ;
  assign cx_22$put_sumPrev = cx_21$result ;
  assign cx_22$EN_put = cx_21$RDY_result ;
  assign cx_22$EN_result = cx_22$RDY_result ;

  // submodule cx_23
  assign cx_23$put_datas = out[9407:9016] ;
  assign cx_23$put_sumPrev = cx_22$result ;
  assign cx_23$EN_put = cx_22$RDY_result ;
  assign cx_23$EN_result = cx_23$RDY_result ;

  // submodule cx_24
  assign cx_24$put_datas = out[9799:9408] ;
  assign cx_24$put_sumPrev = cx_23$result ;
  assign cx_24$EN_put = cx_23$RDY_result ;
  assign cx_24$EN_result = cx_24$RDY_result ;

  // submodule cx_25
  assign cx_25$put_datas = out[10191:9800] ;
  assign cx_25$put_sumPrev = cx_24$result ;
  assign cx_25$EN_put = cx_24$RDY_result ;
  assign cx_25$EN_result = cx_25$RDY_result ;

  // submodule cx_26
  assign cx_26$put_datas = out[10583:10192] ;
  assign cx_26$put_sumPrev = cx_25$result ;
  assign cx_26$EN_put = cx_25$RDY_result ;
  assign cx_26$EN_result = cx_26$RDY_result ;

  // submodule cx_27
  assign cx_27$put_datas = out[10975:10584] ;
  assign cx_27$put_sumPrev = cx_26$result ;
  assign cx_27$EN_put = cx_26$RDY_result ;
  assign cx_27$EN_result = cx_27$RDY_result ;

  // submodule cx_28
  assign cx_28$put_datas = out[11367:10976] ;
  assign cx_28$put_sumPrev = cx_27$result ;
  assign cx_28$EN_put = cx_27$RDY_result ;
  assign cx_28$EN_result = cx_28$RDY_result ;

  // submodule cx_29
  assign cx_29$put_datas = out[11759:11368] ;
  assign cx_29$put_sumPrev = cx_28$result ;
  assign cx_29$EN_put = cx_28$RDY_result ;
  assign cx_29$EN_result = cx_29$RDY_result ;

  // submodule cx_3
  assign cx_3$put_datas = out[1567:1176] ;
  assign cx_3$put_sumPrev = cx_2$result ;
  assign cx_3$EN_put = cx_2$RDY_result ;
  assign cx_3$EN_result = cx_3$RDY_result ;

  // submodule cx_30
  assign cx_30$put_datas = out[12151:11760] ;
  assign cx_30$put_sumPrev = cx_29$result ;
  assign cx_30$EN_put = cx_29$RDY_result ;
  assign cx_30$EN_result = cx_30$RDY_result ;

  // submodule cx_31
  assign cx_31$put_datas = out[12543:12152] ;
  assign cx_31$put_sumPrev = cx_30$result ;
  assign cx_31$EN_put = cx_30$RDY_result ;
  assign cx_31$EN_result = cx_31$RDY_result ;

  // submodule cx_32
  assign cx_32$put_datas = out[12935:12544] ;
  assign cx_32$put_sumPrev = cx_31$result ;
  assign cx_32$EN_put = cx_31$RDY_result ;
  assign cx_32$EN_result = cx_32$RDY_result ;

  // submodule cx_33
  assign cx_33$put_datas = out[13327:12936] ;
  assign cx_33$put_sumPrev = cx_32$result ;
  assign cx_33$EN_put = cx_32$RDY_result ;
  assign cx_33$EN_result = cx_33$RDY_result ;

  // submodule cx_34
  assign cx_34$put_datas = out[13719:13328] ;
  assign cx_34$put_sumPrev = cx_33$result ;
  assign cx_34$EN_put = cx_33$RDY_result ;
  assign cx_34$EN_result = cx_34$RDY_result ;

  // submodule cx_35
  assign cx_35$put_datas = out[14111:13720] ;
  assign cx_35$put_sumPrev = cx_34$result ;
  assign cx_35$EN_put = cx_34$RDY_result ;
  assign cx_35$EN_result = cx_35$RDY_result ;

  // submodule cx_36
  assign cx_36$put_datas = out[14503:14112] ;
  assign cx_36$put_sumPrev = cx_35$result ;
  assign cx_36$EN_put = cx_35$RDY_result ;
  assign cx_36$EN_result = cx_36$RDY_result ;

  // submodule cx_37
  assign cx_37$put_datas = out[14895:14504] ;
  assign cx_37$put_sumPrev = cx_36$result ;
  assign cx_37$EN_put = cx_36$RDY_result ;
  assign cx_37$EN_result = cx_37$RDY_result ;

  // submodule cx_38
  assign cx_38$put_datas = out[15287:14896] ;
  assign cx_38$put_sumPrev = cx_37$result ;
  assign cx_38$EN_put = cx_37$RDY_result ;
  assign cx_38$EN_result = cx_38$RDY_result ;

  // submodule cx_39
  assign cx_39$put_datas = out[15679:15288] ;
  assign cx_39$put_sumPrev = cx_38$result ;
  assign cx_39$EN_put = cx_38$RDY_result ;
  assign cx_39$EN_result = cx_39$RDY_result ;

  // submodule cx_4
  assign cx_4$put_datas = out[1959:1568] ;
  assign cx_4$put_sumPrev = cx_3$result ;
  assign cx_4$EN_put = cx_3$RDY_result ;
  assign cx_4$EN_result = cx_4$RDY_result ;

  // submodule cx_40
  assign cx_40$put_datas = out[16071:15680] ;
  assign cx_40$put_sumPrev = cx_39$result ;
  assign cx_40$EN_put = cx_39$RDY_result ;
  assign cx_40$EN_result = cx_40$RDY_result ;

  // submodule cx_41
  assign cx_41$put_datas = out[16463:16072] ;
  assign cx_41$put_sumPrev = cx_40$result ;
  assign cx_41$EN_put = cx_40$RDY_result ;
  assign cx_41$EN_result = cx_41$RDY_result ;

  // submodule cx_42
  assign cx_42$put_datas = out[16855:16464] ;
  assign cx_42$put_sumPrev = cx_41$result ;
  assign cx_42$EN_put = cx_41$RDY_result ;
  assign cx_42$EN_result = cx_42$RDY_result ;

  // submodule cx_43
  assign cx_43$put_datas = out[17247:16856] ;
  assign cx_43$put_sumPrev = cx_42$result ;
  assign cx_43$EN_put = cx_42$RDY_result ;
  assign cx_43$EN_result = cx_43$RDY_result ;

  // submodule cx_44
  assign cx_44$put_datas = out[17639:17248] ;
  assign cx_44$put_sumPrev = cx_43$result ;
  assign cx_44$EN_put = cx_43$RDY_result ;
  assign cx_44$EN_result = cx_44$RDY_result ;

  // submodule cx_45
  assign cx_45$put_datas = out[18031:17640] ;
  assign cx_45$put_sumPrev = cx_44$result ;
  assign cx_45$EN_put = cx_44$RDY_result ;
  assign cx_45$EN_result = cx_45$RDY_result ;

  // submodule cx_46
  assign cx_46$put_datas = out[18423:18032] ;
  assign cx_46$put_sumPrev = cx_45$result ;
  assign cx_46$EN_put = cx_45$RDY_result ;
  assign cx_46$EN_result = cx_46$RDY_result ;

  // submodule cx_47
  assign cx_47$put_datas = out[18815:18424] ;
  assign cx_47$put_sumPrev = cx_46$result ;
  assign cx_47$EN_put = cx_46$RDY_result ;
  assign cx_47$EN_result = cx_47$RDY_result ;

  // submodule cx_48
  assign cx_48$put_datas = out[19207:18816] ;
  assign cx_48$put_sumPrev = cx_47$result ;
  assign cx_48$EN_put = cx_47$RDY_result ;
  assign cx_48$EN_result = cx_48$RDY_result ;

  // submodule cx_49
  assign cx_49$put_datas = out[19599:19208] ;
  assign cx_49$put_sumPrev = cx_48$result ;
  assign cx_49$EN_put = cx_48$RDY_result ;
  assign cx_49$EN_result = cx_49$RDY_result ;

  // submodule cx_5
  assign cx_5$put_datas = out[2351:1960] ;
  assign cx_5$put_sumPrev = cx_4$result ;
  assign cx_5$EN_put = cx_4$RDY_result ;
  assign cx_5$EN_result = cx_5$RDY_result ;

  // submodule cx_50
  assign cx_50$put_datas = out[19991:19600] ;
  assign cx_50$put_sumPrev = cx_49$result ;
  assign cx_50$EN_put = cx_49$RDY_result ;
  assign cx_50$EN_result = cx_50$RDY_result ;

  // submodule cx_51
  assign cx_51$put_datas = out[20383:19992] ;
  assign cx_51$put_sumPrev = cx_50$result ;
  assign cx_51$EN_put = cx_50$RDY_result ;
  assign cx_51$EN_result = cx_51$RDY_result ;

  // submodule cx_52
  assign cx_52$put_datas = out[20775:20384] ;
  assign cx_52$put_sumPrev = cx_51$result ;
  assign cx_52$EN_put = cx_51$RDY_result ;
  assign cx_52$EN_result = cx_52$RDY_result ;

  // submodule cx_53
  assign cx_53$put_datas = out[21167:20776] ;
  assign cx_53$put_sumPrev = cx_52$result ;
  assign cx_53$EN_put = cx_52$RDY_result ;
  assign cx_53$EN_result = cx_53$RDY_result ;

  // submodule cx_54
  assign cx_54$put_datas = out[21559:21168] ;
  assign cx_54$put_sumPrev = cx_53$result ;
  assign cx_54$EN_put = cx_53$RDY_result ;
  assign cx_54$EN_result = cx_54$RDY_result ;

  // submodule cx_55
  assign cx_55$put_datas = out[21951:21560] ;
  assign cx_55$put_sumPrev = cx_54$result ;
  assign cx_55$EN_put = cx_54$RDY_result ;
  assign cx_55$EN_result = cx_55$RDY_result ;

  // submodule cx_56
  assign cx_56$put_datas = out[22343:21952] ;
  assign cx_56$put_sumPrev = cx_55$result ;
  assign cx_56$EN_put = cx_55$RDY_result ;
  assign cx_56$EN_result = cx_56$RDY_result ;

  // submodule cx_57
  assign cx_57$put_datas = out[22735:22344] ;
  assign cx_57$put_sumPrev = cx_56$result ;
  assign cx_57$EN_put = cx_56$RDY_result ;
  assign cx_57$EN_result = cx_57$RDY_result ;

  // submodule cx_58
  assign cx_58$put_datas = out[23127:22736] ;
  assign cx_58$put_sumPrev = cx_57$result ;
  assign cx_58$EN_put = cx_57$RDY_result ;
  assign cx_58$EN_result = cx_58$RDY_result ;

  // submodule cx_59
  assign cx_59$put_datas = out[23519:23128] ;
  assign cx_59$put_sumPrev = cx_58$result ;
  assign cx_59$EN_put = cx_58$RDY_result ;
  assign cx_59$EN_result = cx_59$RDY_result ;

  // submodule cx_6
  assign cx_6$put_datas = out[2743:2352] ;
  assign cx_6$put_sumPrev = cx_5$result ;
  assign cx_6$EN_put = cx_5$RDY_result ;
  assign cx_6$EN_result = cx_6$RDY_result ;

  // submodule cx_60
  assign cx_60$put_datas = out[23911:23520] ;
  assign cx_60$put_sumPrev = cx_59$result ;
  assign cx_60$EN_put = cx_59$RDY_result ;
  assign cx_60$EN_result = cx_60$RDY_result ;

  // submodule cx_61
  assign cx_61$put_datas = out[24303:23912] ;
  assign cx_61$put_sumPrev = cx_60$result ;
  assign cx_61$EN_put = cx_60$RDY_result ;
  assign cx_61$EN_result = cx_61$RDY_result ;

  // submodule cx_62
  assign cx_62$put_datas = out[24695:24304] ;
  assign cx_62$put_sumPrev = cx_61$result ;
  assign cx_62$EN_put = cx_61$RDY_result ;
  assign cx_62$EN_result = cx_62$RDY_result ;

  // submodule cx_63
  assign cx_63$put_datas = out[25087:24696] ;
  assign cx_63$put_sumPrev = cx_62$result ;
  assign cx_63$EN_put = cx_62$RDY_result ;
  assign cx_63$EN_result = WILL_FIRE_RL__getFinal ;

  // submodule cx_7
  assign cx_7$put_datas = out[3135:2744] ;
  assign cx_7$put_sumPrev = cx_6$result ;
  assign cx_7$EN_put = cx_6$RDY_result ;
  assign cx_7$EN_result = cx_7$RDY_result ;

  // submodule cx_8
  assign cx_8$put_datas = out[3527:3136] ;
  assign cx_8$put_sumPrev = cx_7$result ;
  assign cx_8$EN_put = cx_7$RDY_result ;
  assign cx_8$EN_result = cx_8$RDY_result ;

  // submodule cx_9
  assign cx_9$put_datas = out[3919:3528] ;
  assign cx_9$put_sumPrev = cx_8$result ;
  assign cx_9$EN_put = cx_8$RDY_result ;
  assign cx_9$EN_result = cx_9$RDY_result ;

  // submodule outQ
  assign outQ$D_IN = cx_63$result ;
  assign outQ$ENQ = WILL_FIRE_RL__getFinal ;
  assign outQ$DEQ = EN_get ;
  assign outQ$CLR = 1'b0 ;

  // submodule px
  assign px$configure_a = configure_a ;
  assign px$configure_m = configure_m ;
  assign px$configure_wx = configure_wx ;
  assign px$put_datas =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d244,
	       value + seed,
	       seed } ;
  assign px$EN_put = px$RDY_put && init ;
  assign px$EN_get = MUX_fetch$write_1__SEL_2 ;
  assign px$EN_configure = EN_configure ;

  // remaining internal signals
  assign _10_MUL_value___d213 = 8'd10 * value ;
  assign _11_MUL_value___d210 = 8'd11 * value ;
  assign _12_MUL_value___d206 = 8'd12 * value ;
  assign _13_MUL_value___d203 = 8'd13 * value ;
  assign _14_MUL_value___d199 = 8'd14 * value ;
  assign _15_MUL_value___d196 = 8'd15 * value ;
  assign _17_MUL_value___d189 = 8'd17 * value ;
  assign _18_MUL_value___d185 = 8'd18 * value ;
  assign _19_MUL_value___d182 = 8'd19 * value ;
  assign _20_MUL_value___d178 = 8'd20 * value ;
  assign _21_MUL_value___d175 = 8'd21 * value ;
  assign _22_MUL_value___d171 = 8'd22 * value ;
  assign _23_MUL_value___d168 = 8'd23 * value ;
  assign _24_MUL_value___d164 = 8'd24 * value ;
  assign _25_MUL_value___d161 = 8'd25 * value ;
  assign _26_MUL_value___d157 = 8'd26 * value ;
  assign _27_MUL_value___d154 = 8'd27 * value ;
  assign _28_MUL_value___d150 = 8'd28 * value ;
  assign _29_MUL_value___d147 = 8'd29 * value ;
  assign _30_MUL_value___d143 = 8'd30 * value ;
  assign _31_MUL_value___d140 = 8'd31 * value ;
  assign _33_MUL_value___d133 = 8'd33 * value ;
  assign _34_MUL_value___d129 = 8'd34 * value ;
  assign _35_MUL_value___d126 = 8'd35 * value ;
  assign _36_MUL_value___d122 = 8'd36 * value ;
  assign _37_MUL_value___d119 = 8'd37 * value ;
  assign _38_MUL_value___d115 = 8'd38 * value ;
  assign _39_MUL_value___d112 = 8'd39 * value ;
  assign _3_MUL_value___d238 = 8'd3 * value ;
  assign _40_MUL_value___d108 = 8'd40 * value ;
  assign _41_MUL_value___d105 = 8'd41 * value ;
  assign _42_MUL_value___d101 = 8'd42 * value ;
  assign _43_MUL_value___d98 = 8'd43 * value ;
  assign _44_MUL_value___d94 = 8'd44 * value ;
  assign _45_MUL_value___d91 = 8'd45 * value ;
  assign _46_MUL_value___d87 = 8'd46 * value ;
  assign _47_MUL_value___d84 = 8'd47 * value ;
  assign _48_MUL_value___d80 = 8'd48 * value ;
  assign _49_MUL_value___d77 = 8'd49 * value ;
  assign _50_MUL_value___d73 = 8'd50 * value ;
  assign _51_MUL_value___d70 = 8'd51 * value ;
  assign _52_MUL_value___d66 = 8'd52 * value ;
  assign _53_MUL_value___d63 = 8'd53 * value ;
  assign _54_MUL_value___d59 = 8'd54 * value ;
  assign _55_MUL_value___d56 = 8'd55 * value ;
  assign _56_MUL_value___d52 = 8'd56 * value ;
  assign _57_MUL_value___d49 = 8'd57 * value ;
  assign _58_MUL_value___d45 = 8'd58 * value ;
  assign _59_MUL_value___d42 = 8'd59 * value ;
  assign _5_MUL_value___d231 = 8'd5 * value ;
  assign _60_MUL_value___d38 = 8'd60 * value ;
  assign _61_MUL_value___d35 = 8'd61 * value ;
  assign _62_MUL_value___d31 = 8'd62 * value ;
  assign _63_MUL_value___d28 = 8'd63 * value ;
  assign _65_MUL_value___d21 = 8'd65 * value ;
  assign _66_MUL_value___d17 = 8'd66 * value ;
  assign _67_MUL_value___d14 = 8'd67 * value ;
  assign _68_MUL_value___d10 = 8'd68 * value ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d111 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d97,
	       _43_MUL_value___d98[7:0] + seed,
	       _42_MUL_value___d101[7:0] + seed,
	       _41_MUL_value___d105[7:0] + seed,
	       _40_MUL_value___d108[7:0] + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d125 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d111,
	       _39_MUL_value___d112[7:0] + seed,
	       _38_MUL_value___d115[7:0] + seed,
	       _37_MUL_value___d119[7:0] + seed,
	       _36_MUL_value___d122[7:0] + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d139 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d125,
	       _35_MUL_value___d126[7:0] + seed,
	       _34_MUL_value___d129[7:0] + seed,
	       _33_MUL_value___d133[7:0] + seed,
	       { value[2:0], 5'd0 } + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d153 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d139,
	       _31_MUL_value___d140[7:0] + seed,
	       _30_MUL_value___d143[7:0] + seed,
	       _29_MUL_value___d147[7:0] + seed,
	       _28_MUL_value___d150[7:0] + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d167 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d153,
	       _27_MUL_value___d154[7:0] + seed,
	       _26_MUL_value___d157[7:0] + seed,
	       _25_MUL_value___d161[7:0] + seed,
	       _24_MUL_value___d164[7:0] + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d181 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d167,
	       _23_MUL_value___d168[7:0] + seed,
	       _22_MUL_value___d171[7:0] + seed,
	       _21_MUL_value___d175[7:0] + seed,
	       _20_MUL_value___d178[7:0] + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d195 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d181,
	       _19_MUL_value___d182[7:0] + seed,
	       _18_MUL_value___d185[7:0] + seed,
	       _17_MUL_value___d189[7:0] + seed,
	       { value[3:0], 4'd0 } + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d20 =
	     { _69_MUL_value___d6[7:0] + seed,
	       _68_MUL_value___d10[7:0] + seed,
	       _67_MUL_value___d14[7:0] + seed,
	       _66_MUL_value___d17[7:0] + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d209 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d195,
	       _15_MUL_value___d196[7:0] + seed,
	       _14_MUL_value___d199[7:0] + seed,
	       _13_MUL_value___d203[7:0] + seed,
	       _12_MUL_value___d206[7:0] + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d223 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d209,
	       _11_MUL_value___d210[7:0] + seed,
	       _10_MUL_value___d213[7:0] + seed,
	       _9_MUL_value___d217[7:0] + seed,
	       { value[4:0], 3'd0 } + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d237 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d223,
	       _7_MUL_value___d224[7:0] + seed,
	       _6_MUL_value___d227[7:0] + seed,
	       _5_MUL_value___d231[7:0] + seed,
	       { value[5:0], 2'd0 } + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d244 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d237,
	       _3_MUL_value___d238[7:0] + seed,
	       { value[6:0], 1'd0 } + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d27 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d20,
	       _65_MUL_value___d21[7:0] + seed,
	       { value[1:0], 6'd0 } + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d41 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d27,
	       _63_MUL_value___d28[7:0] + seed,
	       _62_MUL_value___d31[7:0] + seed,
	       _61_MUL_value___d35[7:0] + seed,
	       _60_MUL_value___d38[7:0] + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d55 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d41,
	       _59_MUL_value___d42[7:0] + seed,
	       _58_MUL_value___d45[7:0] + seed,
	       _57_MUL_value___d49[7:0] + seed,
	       _56_MUL_value___d52[7:0] + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d69 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d55,
	       _55_MUL_value___d56[7:0] + seed,
	       _54_MUL_value___d59[7:0] + seed,
	       _53_MUL_value___d63[7:0] + seed,
	       _52_MUL_value___d66[7:0] + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d83 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d69,
	       _51_MUL_value___d70[7:0] + seed,
	       _50_MUL_value___d73[7:0] + seed,
	       _49_MUL_value___d77[7:0] + seed,
	       _48_MUL_value___d80[7:0] + seed } ;
  assign _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d97 =
	     { _69_MUL_value_BITS_7_TO_0_PLUS_seed_CONCAT_68_M_ETC___d83,
	       _47_MUL_value___d84[7:0] + seed,
	       _46_MUL_value___d87[7:0] + seed,
	       _45_MUL_value___d91[7:0] + seed,
	       _44_MUL_value___d94[7:0] + seed } ;
  assign _69_MUL_value___d6 = 8'd69 * value ;
  assign _6_MUL_value___d227 = 8'd6 * value ;
  assign _7_MUL_value___d224 = 8'd7 * value ;
  assign _9_MUL_value___d217 = 8'd9 * value ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        count <= `BSV_ASSIGNMENT_DELAY 32'd0;
	fetch <= `BSV_ASSIGNMENT_DELAY 1'd1;
	index <= `BSV_ASSIGNMENT_DELAY 19'd0;
	init <= `BSV_ASSIGNMENT_DELAY 1'd0;
	seed <= `BSV_ASSIGNMENT_DELAY 8'd1;
	value <= `BSV_ASSIGNMENT_DELAY 8'd1;
      end
    else
      begin
        if (count$EN) count <= `BSV_ASSIGNMENT_DELAY count$D_IN;
	if (fetch$EN) fetch <= `BSV_ASSIGNMENT_DELAY fetch$D_IN;
	if (index$EN) index <= `BSV_ASSIGNMENT_DELAY index$D_IN;
	if (init$EN) init <= `BSV_ASSIGNMENT_DELAY init$D_IN;
	if (seed$EN) seed <= `BSV_ASSIGNMENT_DELAY seed$D_IN;
	if (value$EN) value <= `BSV_ASSIGNMENT_DELAY value$D_IN;
      end
    if (out$EN) out <= `BSV_ASSIGNMENT_DELAY out$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    count = 32'hAAAAAAAA;
    fetch = 1'h0;
    index = 19'h2AAAA;
    init = 1'h0;
    out =
	25088'h
    seed = 8'hAA;
    value = 8'hAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkFlowTest

